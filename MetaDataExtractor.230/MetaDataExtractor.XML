<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MetaDataExtractor</name>
    </assembly>
    <members>
        <member name="T:com.codec.jpeg.JPEGDecodeParam">
             <summary>
             JPEGDecodeParam encapsulates tables and options necessary to
             control decoding JPEG datastreams. Parameters are either set explicitly
             by the application for encoding, or read from the JPEG lcHeader for
             decoding.  In the case of decoding abbreviated data streams the
             application may need to set some/all of the values it'str self.
             
             When working with BufferedImages, the codec will attempt to
             generate an appropriate ColorModel for the JPEG COLOR_ID. This is
             not always possible (example mappings are listed below) .  In cases
             where unsupported conversions are required, or unknown encoded
             COLOR_ID'str are in use, the user must request the data as a Raster
             and perform the transformations themselves.  When decoding into a
             raster no ColorSpace
             adjustments are made.
              
             Note: The color ids described herein are simply enumerated values
             that influence data processing by the JPEG codec.  JPEG compression
             is by definition color blind.  These values are used as hints when
             decompressing JPEG data.  Of particular interest is the default
             conversion from YCbCr to sRGB when decoding buffered Images.
             
             Note: because JPEG is mostly color-blind color fidelity can not be
             garunteed.  This will hopefully be rectified in the near future by
             the wide spread inclusion of ICC-profiles in the JPEG data stream
             (as a special marker).
             
             The following is an example of the conversions that take place.
             This is only a guide to the types of conversions that are allowed.
             This list is likely to change in the future so it is
             strongly recommended that you check for thrown
             ImageFormatExceptions and check the actual ColorModel associated
             with the BufferedImage returned rather than make assumtions.
             
             DECODING:
             
             JPEG (Encoded) Color ID         BufferedImage ColorSpace
             =======================         ========================
             COLOR_ID_UNKNOWN                ** Invalid **
             COLOR_ID_GRAY                   CS_GRAY
             COLOR_ID_RGB                    CS_sRGB
             COLOR_ID_YCbCr                  CS_sRGB
             COLOR_ID_CMYK                   ** Invalid **
             COLOR_ID_PYCC                   CS_PYCC
             COLOR_ID_RGBA                   CS_sRGB (w/ alpha)
             COLOR_ID_YCbCrA                 CS_sRGB (w/ alpha)
             COLOR_ID_RGBA_INVERTED          ** Invalid **
             COLOR_ID_YCbCrA_INVERTED        ** Invalid **
             COLOR_ID_PYCCA                  CS_PYCC (w/ alpha)
             COLOR_ID_YCCK                   ** Invalid **
            
             If the user needs better control over conversion, the user must
             request the data as a Raster and handle the conversion of the image
             data themselves.
             
             When decoding JFIF files the encoded COLOR_ID will always be one
             of: COLOR_ID_UNKNOWN, COLOR_ID_GRAY, COLOR_ID_RGB, COLOR_ID_YCbCr,
             COLOR_ID_CMYK, or COLOR_ID_YCCK
             
             Note that the classes in the com.sun.image.codec.jpeg package are not
             part of the core Java APIs.  They are a part of Sun'str JDK and JRE
             distributions.  Although other licensees may choose to distribute these
             classes, developers cannot depend on their availability in non-Sun
             implementations.  We expect that equivalent functionality will eventually
             be available in a core API or standard extension.
             </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.COLOR_ID_UNKNOWN">
            <summary>
            Unknown or Undefined Color ID
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.COLOR_ID_GRAY">
            <summary>
            Monochrome
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.COLOR_ID_RGB">
            <summary>
            Red, Green, and Blue
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.COLOR_ID_YCbCr">
            <summary>
            YCbCr
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.COLOR_ID_CMYK">
            <summary>
            CMYK
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.COLOR_ID_PYCC">
            <summary>
            PhotoYCC
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.COLOR_ID_RGBA">
            <summary>
            RGB-Alpha
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.COLOR_ID_YCbCrA">
            <summary>
            YCbCr-Alpha
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.COLOR_ID_RGBA_INVERTED">
            <summary>
            RGB-Alpha with R, G, and B inverted.
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.COLOR_ID_YCbCrA_INVERTED">
            <summary>
            YCbCr-Alpha with Y, Cb, and Cr inverted.
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.COLOR_ID_PYCCA">
            <summary>
            PhotoYCC-Alpha
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.COLOR_ID_YCCK">
            <summary>
            YCbCrK
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.NUM_COLOR_ID">
            <summary>
            Number of color ids defined.
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.NUM_TABLES">
            <summary>
            Number of allowed Huffman and Quantization Tables
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.DENSITY_UNIT_ASPECT_RATIO">
            <summary>
            The X and Y units simply indicate the aspect ratio of the pixels.
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.DENSITY_UNIT_DOTS_INCH">
            <summary>
            Pixel density is in pixels per inch.
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.DENSITY_UNIT_DOTS_CM">
            <summary>
            Pixel density is in pixels per centemeter.
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.NUM_DENSITY_UNIT">
            <summary>
            The max known value for DENSITY_UNIT
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APP0_MARKER">
            <summary>
            APP0 marker - JFIF info
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APP1_MARKER">
            <summary>
            APP1 marker
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APP2_MARKER">
            <summary>
            APP2 marker
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APP3_MARKER">
            <summary>
            APP3 marker
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APP4_MARKER">
            <summary>
            APP4 marker
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APP5_MARKER">
            <summary>
            APP5 marker
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APP6_MARKER">
            <summary>
            APP6 marker
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APP7_MARKER">
            <summary>
            APP7 marker
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APP8_MARKER">
            <summary>
            APP8 marker
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APP9_MARKER">
            <summary>
            APP9 marker
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APPA_MARKER">
            <summary>
            APPA marker
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APPB_MARKER">
            <summary>
            APPB marker
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APPC_MARKER">
            <summary>
            APPC marker
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APPD_MARKER">
            <summary>
            APPD marker
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APPE_MARKER">
            <summary>
            APPE marker - Adobe info
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.APPF_MARKER">
            <summary>
            APPF marker
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGDecodeParam.COMMENT_MARKER">
            <summary>
            Adobe marker indicates presence/need for Adobe marker.
            </summary>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetWidth">
            <summary>
            Get the image width 
            </summary>
            <returns>the width of the image data in pixels.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetHeight">
            <summary>
            Get the image height
            </summary>
            <returns>The height of the image data in pixels.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetHorizontalSubsampling(System.Int32)">
            <summary>
            Return the Horizontal subsampling lcFactor for requested
            Component. The Subsample lcFactor is the number of input pixels
            that contribute to each output pixel.  This is distinct from
            the way the JPEG to each output pixel.  This is distinct from
            the way the JPEG standard defines this quantity, because 
            fractional subsampling factors are not allowed, and it was felt
            </summary>
            <param name="component">The component of the encoded image to return the subsampling lcFactor for.</param>
            <returns>The subsample lcFactor.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetVerticalSubsampling(System.Int32)">
            <summary>
            Return the Vertical subsampling lcFactor for requested Component. 
            The Subsample lcFactor is the number of input pixels that contribute to each output pixel. 
            This is distinct from the way the JPEG to each output pixel. 
            This is distinct from the way the JPEG standard defines this quantity, because 
            fractional subsampling factors are not allowed, and it was felt 
            </summary>
            <param name="component">The component of the encoded image to return the subsampling lcFactor for.</param>
            <returns>The subsample lcFactor.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetQTable(System.Int32)">
            <summary>
            Returns the coefficient quantization tables or NULL if not defined. 
            tableNum must range in value from 0 - 3. 
            </summary>
            <param name="tableNum">the index of the table to be returned.</param>
            <returns>Quantization table stored at index tableNum.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetQTableForComponent(System.Int32)">
            <summary>
            Returns the Quantization table for the requested component. 
            </summary>
            <param name="component">the image component of interest.</param>
            <returns>Quantization table associated with component</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetDCHuffmanTable(System.Int32)">
            <summary>
            Returns the DC Huffman coding table requested or null if not defined 
            </summary>
            <param name="tableNum">the index of the table to be returned.</param>
            <returns>Huffman table stored at index tableNum.  </returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetDCHuffmanTableForComponent(System.Int32)">
            <summary>
            Returns the DC Huffman coding table for the requested component. 
            </summary>
            <param name="component">the image component of interest.</param>
            <returns>Huffman table associated with component</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetACHuffmanTable(System.Int32)">
            <summary>
            Returns the AC Huffman coding table requested or null if not defined 
            </summary>
            <param name="tableNum">the index of the table to be returned.</param>
            <returns>Huffman table stored at index tableNum.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetACHuffmanTableForComponent(System.Int32)">
            <summary>
            Returns the AC Huffman coding table for the requested component. 
            </summary>
            <param name="component">the image component of interest.</param>
            <returns>Huffman table associated with component</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetDCHuffmanComponentMapping(System.Int32)">
            <summary>
            Get the number of the DC Huffman table that will be used for a particular component. 
            </summary>
            <param name="component">The Component of interest.</param>
            <returns>The table number of the DC Huffman table for component.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetACHuffmanComponentMapping(System.Int32)">
            <summary>
            Get the number of the AC Huffman table that will be used for a particular component. 
            </summary>
            <param name="component">The Component of interest.</param>
            <returns>The table number of the AC Huffman table for component.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetQTableComponentMapping(System.Int32)">
            <summary>
            Get the number of the quantization table that will be used for a particular component. 
            </summary>
            <param name="component">The Component of interest.</param>
            <returns>The table number of the Quantization table for component.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.IsImageInfoValid">
            <summary>
            Returns true if the image information in the ParamBlock is currently valid. 
            This indicates if image data was read from the stream for decoding and weather 
            image data should be written when encoding. 
            </summary>
            <returns>true if the image information in the ParamBlock is currently valid. </returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.IsTableInfoValid">
            <summary>
            Returns true if the tables in the ParamBlock are currently valid.
            This indicates that tables were read from the stream for decoding. 
            When encoding this indicates wether tables should be written to the stream.
            </summary>
            <returns>true if the tables in the ParamBlock are currently valid.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetMarker(System.Int32)">
            <summary>
            Returns true if at least one instance of the marker is present in the Parameter object.
            For encoding returns true if there is at least one instance of the marker to be written.
            </summary>
            <param name="marker"></param>
            <returns>The marker of interest.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetMarkerData(System.Int32)">
            <summary>
            Returns a 'byte[][]' associated with the requested marker in the parameter object.
            Each entry in the 'byte[][]' is the data associated with one instance of 
            the marker (each marker can theoretically appear any number of times in a stream).
            </summary>
            <param name="marker">The marker of interest.</param>
            <returns>The 'byte[][]' for this marker or null if none available.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetEncodedColorID">
            <summary>
            Returns the JPEG Encoded color id. This is generally speaking only used 
            if you are decoding into Rasters.  Note that when decoding into a Raster no 
            color conversion is performed. 
            </summary>
            <returns>The value of the JPEG encoded data'str color id.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetNumComponents">
            <summary>
            Returns the number of components for the current encoding COLOR_ID. 
            </summary>
            <returns>the number of Components</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetRestartInterval">
            <summary>
            Get the MCUs per restart marker. 
            </summary>
            <returns>The number of MCUs between restart markers.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetDensityUnit">
            <summary>
            Get the code for pixel size units This value is copied from the APP0 marker.
            It isn't used by the JPEG codec.  If the APP0 marker wasn't present then you 
            can not rely on this value. 
            </summary>
            <returns>Value indicating the density unit one of the DENSITY_UNIT_* constants.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.GetXDensity">
            <summary>
            Get the horizontal pixel density This value is copied from the APP0 marker.
            It isn't used by the JPEG code.  If the APP0 marker wasn't present then 
            you can not rely on this value. 
            </summary>
            <returns>The horizontal pixel density, in units described by</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGDecodeParam.getYDensity">
            <summary>
            Get the vertical pixel density This value is copied into the APP0 marker.
            It isn't used by the JPEG code. If the APP0 marker wasn't present then 
            you can not rely on this value. 
            </summary>
            <returns>The verticle pixel density, in units described by</returns>
        </member>
        <member name="T:com.codec.jpeg.JPEGHuffmanTable">
            <summary>
            A class to encapsulate a JPEG Huffman table. 
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGHuffmanTable.HUFF_MAX_LEN">
            <summary>
            The maximum number of symbol lengths (max symbol length in bits = 16)  
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGHuffmanTable.HUFF_MAX_SYM">
            <summary>
            the maximum number of symbols
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGHuffmanTable.lengths">
            <summary>
            bits[k] = number of symbols with length k bits
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGHuffmanTable.symbols">
            <summary>
            Symbols in order of increasing length
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGHuffmanTable.StdDCLuminance">
            <summary>
            Standard Huffman table ( JPEG standard section K.3 )
            </summary>
        </member>
        <member name="M:com.codec.jpeg.JPEGHuffmanTable.InitStdDCLuminance">
            <summary>
            Initialize Standard Huffman table.
            </summary>
            <returns>Standard Huffman table ( JPEG standard section K.3 )</returns>
        </member>
        <member name="F:com.codec.jpeg.JPEGHuffmanTable.StdDCChrominance">
            <summary>
            Standard Huffman table Chrominance ( JPEG standard section K.3 )
            </summary>
        </member>
        <member name="M:com.codec.jpeg.JPEGHuffmanTable.InitStdDCChrominance">
            <summary>
            Initialize Standard Huffman table Chrominance. 
            </summary>
            <returns>Standard Huffman table Chrominance ( JPEG standard section K.3 )</returns>
        </member>
        <member name="F:com.codec.jpeg.JPEGHuffmanTable.StdACLuminance">
            <summary>
            Standard Huffman table Luminance. 
            </summary>
        </member>
        <member name="M:com.codec.jpeg.JPEGHuffmanTable.InitStdACLuminance">
            <summary>
            Initialize Standard Huffman table Luminance. 
            </summary>
            <returns>Standard Huffman table Luminance ( JPEG standard section K.3 )</returns>
        </member>
        <member name="F:com.codec.jpeg.JPEGHuffmanTable.StdACChrominance">
            <summary>
            Standard Huffman table ACChrominance ( JPEG standard section K.3 )
            </summary>
        </member>
        <member name="M:com.codec.jpeg.JPEGHuffmanTable.InitStdACChrominance">
            <summary>
            Initialize Standard Huffman table ACChrominance. 
            </summary>
            <returns>Standard Huffman table ACChrominance ( JPEG standard section K.3 )</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGHuffmanTable.#ctor">
            <summary>
            Private constructor used to construct the Standard Huffman tables 
            </summary>
        </member>
        <member name="M:com.codec.jpeg.JPEGHuffmanTable.#ctor(System.Int16[],System.Int16[])">
            <summary>
            Creates a Huffman Table and initializes it. 
            </summary>
            <param name="lengths">lengths[k] = # of symbols with codes of length k bits; lengths[0] is ignored</param>
            <param name="symbols">symbols in order of increasing code length</param>
            <exception cref="T:System.ArgumentException">if the length of lengths is greater than 17 or if the length of symbols is greater than 256 or if any of the values in lengths or symbols is less than zero</exception>
        </member>
        <member name="M:com.codec.jpeg.JPEGHuffmanTable.checkTable">
            <summary>
            This checks that the table they gave us isn't 'illegal' It checks that the symbol 
            length counts are possible, and that they gave us at least enough symbols for 
            the symbol length counts. Eventually this might check that there aren't duplicate 
            symbols. 
            </summary>
        </member>
        <member name="M:com.codec.jpeg.JPEGHuffmanTable.GetLengths">
            <summary>
            Return a copy of the array containing the number of symbols for each length in the Huffman table. 
            </summary>
            <returns>A short array where array[k] = # of symbols in the table of length k. array[0] is unused</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGHuffmanTable.GetSymbols">
            <summary>
            Return an array containing the Huffman symbols arranged by increasing length. 
            To make use of this array you must refer the the lengths array.
            </summary>
            <returns>A short array of Huffman symbols</returns>
        </member>
        <member name="T:com.codec.jpeg.JPEGQTable">
            <summary>
            Class to encapsulate the JPEG quantization tables.
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGQTable.quantval">
            <summary>
            Quantization step for each coefficient in zig-zag order
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGQTable.QTABLESIZE">
            <summary>
            The number of coefficients in a DCT block
            </summary>
        </member>
        <member name="F:com.codec.jpeg.JPEGQTable.StdLuminance">
            <summary>
            This is the sample luminance quantization table given in the JPEG spec 
            section K.1, expressed in zigzag order. The spec says that the values 
            given produce "good" quality, and when divided by 2, "very good" quality. 
            </summary>
        </member>
        <member name="M:com.codec.jpeg.JPEGQTable.InitStdLuminance">
            <summary>
            Initialize the StdLuminance table.
            </summary>
            <returns>the StdLuminance table.</returns>
        </member>
        <member name="F:com.codec.jpeg.JPEGQTable.StdChrominance">
            <summary>
            This is the sample luminance quantization table given in the JPEG spec 
            section K.1, expressed in zigzag order. The spec says that the values 
            given produce "good" quality, and when divided by 2, "very good" quality. 
            </summary>
        </member>
        <member name="M:com.codec.jpeg.JPEGQTable.InitStdChrominance">
            <summary>
            Initialize the StdChrominance table.
            </summary>
            <returns>the StdChrominance table.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGQTable.#ctor">
            <summary>
            Constructs an empty quantization table. This is used to create the Std Q-Tables. 
            </summary>
        </member>
        <member name="M:com.codec.jpeg.JPEGQTable.#ctor(System.Int32[])">
            <summary>
            Constructs an quantization table from the array that was passed.
            The coefficents must be in zig-zag order.
            The array must be of length 64.
            </summary>
            <param name="table">the quantization table (this is copied).</param>
            <exception cref="T:System.ArgumentException">if table has not a length of 64</exception>
        </member>
        <member name="M:com.codec.jpeg.JPEGQTable.GetTable">
            <summary>
            Returns the current quantization table as an array of someInts in zig zag order. 
            </summary>
            <returns>A copy of the contained quantization table.</returns>
        </member>
        <member name="M:com.codec.jpeg.JPEGQTable.GetScaledInstance(System.Single,System.Boolean)">
            <summary>
            Returns a new Quantization table where the values are multiplied by 
            scaleFactor and then clamped to the range 1..32767 (or to 1..255 if 
            forceBaseline is 'true'). 
            
            Values less than one tend to improve the quality level of the table, 
            and values greater than one degrade the quality level of the table.
            </summary>
            <param name="scaleFactor">the multiplication lcFactor for the table</param>
            <param name="forceBaseline">if true the values will be clamped to the range  [1 .. 255]</param>
            <returns>A new Q-Table that is a linear multiple of this Q-Table</returns>
        </member>
        <member name="T:com.drew.imaging.jpg.JpegMetadataReader">
            <summary>
            This class will extract MetaData from a picture.
            </summary>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegMetadataReader.#ctor">
            <summary>
            Constructor of the object
            </summary>
            <exception cref="T:System.Exception">Allways</exception>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegMetadataReader.ReadMetadata(System.IO.Stream)">
            <summary>
            Reads MetaData from a stream
            </summary>
            <param name="aStream">where to read information</param>
            <returns>the aMetadata object</returns>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegMetadataReader.ReadMetadata(System.IO.FileInfo)">
            <summary>
            Reads MetaData from a aFile
            </summary>
            <param name="aFile">where to read information</param>
            <returns>the aMetadata object</returns>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegMetadataReader.ExtractJpegSegmentReaderMetadata(com.drew.imaging.jpg.JpegSegmentReader)">
            <summary>
            Extracts aMetadata from a SegmentReader
            </summary>
            <param name="aSegmentReader">where to extract aMetadata</param>
            <returns>the aMetadata found</returns>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegMetadataReader.ReadMetadata(com.codec.jpeg.JPEGDecodeParam)">
            <summary>
            Reads aMetadata from a JPEGDecodeParam object
            </summary>
            <param name="aDecodeParam">where to find aMetadata</param>
            <returns>the aMetadata found</returns>
        </member>
        <member name="T:com.drew.imaging.jpg.JpegProcessingException">
            <summary>
            Represents a JpegProcessing exception
            </summary>
        </member>
        <member name="T:com.drew.lang.CompoundException">
            <summary>
            This is Compound exception
            </summary>
        </member>
        <member name="M:com.drew.lang.CompoundException.#ctor(System.String)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aMessage">The error aMessage</param>
        </member>
        <member name="M:com.drew.lang.CompoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aMessage">The error aMessage</param>
            <param name="aCause">The aCause of the exception</param>
        </member>
        <member name="M:com.drew.lang.CompoundException.#ctor(System.Exception)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aCause">The aCause of the exception</param>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegProcessingException.#ctor(System.String)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aMessage">The error aMessage</param>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegProcessingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aMessage">The error aMessage</param>
            <param name="aCause">The aCause of the exception</param>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegProcessingException.#ctor(System.Exception)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aCause">The aCause of the exception</param>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentData.segmentDataMap">
            <summary>
            A map of byte[], keyed by the segment marker.
            </summary>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentData.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentData.AddSegment(System.Byte,System.Byte[])">
            <summary>
            Adds a segment.
            </summary>
            <param name="aSegmentMarker">the marker</param>
            <param name="aSegmentBytes">the value of the segment</param>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentData.GetSegment(System.Byte)">
            <summary>
            Gets a segment using its key.
            </summary>
            <param name="aSegmentMarker">the segment'str key</param>
            <returns>The segment found or null if none found</returns>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentData.GetSegment(System.Byte,System.Int32)">
            <summary>
            Gets a segment using its marker and occurence value.
            </summary>
            <param name="aSegmentMarker">the segment'str marker</param>
            <param name="anOccurrence">the segment'str occurence</param>
            <returns>the segment found at the given occurence, or null if none found</returns>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentData.GetSegmentCount(System.Byte)">
            <summary>
            Gets a segment size.
            </summary>
            <param name="aSegmentMarker">the segment'str marker</param>
            <returns>the size of the marker, zero if none found</returns>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentData.RemoveSegmentOccurrence(System.Byte,System.Int32)">
            <summary>
            Removes a segment using its marker and occurence value.
            </summary>
            <param name="aSegmentMarker">the segment'str marker</param>
            <param name="anOccurrence">the segment'str occurence</param>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentData.RemoveSegment(System.Byte)">
            <summary>
            Removes a segment using its marker and occurence value.
            </summary>
            <param name="aSegmentMarker">the segment'str marker</param>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentData.GetSegmentList(System.Byte)">
            <summary>
            Gets the segment list of value.
            </summary>
            <param name="aSegmentMarker">the segment marker</param>
            <returns>the segemnt list of value, null if none found</returns>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentData.GetOrCreateSegmentList(System.Byte)">
            <summary>
            Gets or creates the segment value with the given marker key.
            </summary>
            <param name="aSegmentMarker">the segment'str marker</param>
            <returns>the segment marker you were looking for, or a new one if none exist</returns>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentData.ContainsSegment(System.Byte)">
            <summary>
            Indicates if the segment is present or not.
            </summary>
            <param name="aSegmentMarker">the segment'str marker you are looking for</param>
            <returns>true if present false if not</returns>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentData.ToFile(System.String,com.drew.imaging.jpg.JpegSegmentData)">
            <summary>
            Writes the aSegmentData to a aFile.
            </summary>
            <param name="aFileName">where to write the information</param>
            <param name="aSegmentData">what to write in the aFile</param>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentData.FromFile(System.String)">
            <summary>
            Loads a jpegsegmentdata from a file.
            </summary>
            <param name="aFileName">where to find data</param>
            <returns>the jpegsegment asked</returns>
        </member>
        <member name="T:com.drew.imaging.jpg.JpegSegmentReader">
            <summary>
            Will analyze a stream form an image
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_SOS" -->
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.MARKER_EOI">
            <summary>
            Private, because one wouldn't search for it.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APP0">
            <summary>
            APP0 Jpeg segment identifier -- Jfif data.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APP1">
            <summary>
            APP1 Jpeg segment identifier -- where Exif data is kept.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APP2">
            <summary>
            APP2 Jpeg segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APP3">
            <summary>
            APP3 Jpeg segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APP4">
            <summary>
            APP4 Jpeg segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APP5">
            <summary>
            APP5 Jpeg segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APP6">
            <summary>
            APP6 Jpeg segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APP7">
            <summary>
            APP7 Jpeg segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APP8">
            <summary>
            APP8 Jpeg segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APP9">
            <summary>
            APP9 Jpeg segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APPA">
            <summary>
            APPA Jpeg segment identifier -- can hold Unicode comments.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APPB">
            <summary>
            APPB Jpeg segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APPC">
            <summary>
            APPC Jpeg segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APPD">
            <summary>
            APPD Jpeg segment identifier -- IPTC data in here.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APPE">
            <summary>
            APPE Jpeg segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_APPF">
            <summary>
            APPF Jpeg segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_SOI">
            <summary>
            Start Of Image segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_DQT">
            <summary>
            Define Quantization Table segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_DHT">
            <summary>
            Define Huffman Table segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_SOF0">
            <summary>
            Start-of-Frame Zero segment identifier.
            </summary>
        </member>
        <member name="F:com.drew.imaging.jpg.JpegSegmentReader.SEGMENT_COM">
            <summary>
            Jpeg comment segment identifier.
            </summary>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentReader.#ctor(System.IO.FileInfo)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aFile">where to read</param>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentReader.#ctor(System.Byte[])">
            <summary>
            Constructor of the object
            </summary>
            <param name="aFileContents">where to read</param>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentReader.#ctor(System.IO.Stream)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aStream">where to read</param>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentReader.ReadSegment(System.Byte)">
            <summary>
            Reads the first instance of a given Jpeg segment, returning the contents as a byte array. 
            </summary>
            <param name="aSegmentMarker">the byte identifier for the desired segment</param>
            <returns>the byte array if found, else null</returns>
            <exception cref="T:com.drew.imaging.jpg.JpegProcessingException">for any problems processing the Jpeg data</exception>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentReader.ReadSegment(System.Byte,System.Int32)">
            <summary>
            Reads the first instance of a given Jpeg segment, returning the contents as a byte array. 
            </summary>
            <param name="aSegmentMarker">the byte identifier for the desired segment</param>
            <param name="anOccurrence">the anOccurrence of the specified segment within the jpeg aFile</param>
            <returns>the byte array if found, else null</returns>
            <exception cref="T:com.drew.imaging.jpg.JpegProcessingException">for any problems processing the Jpeg data</exception>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentReader.GetSegmentCount(System.Byte)">
            <summary>
            Gets the number of segment
            </summary>
            <param name="aSegmentMarker">the byte identifier for the desired segment</param>
            <returns>the number of segment or zero if segment does not exist</returns>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentReader.ReadSegments">
            <summary>
            Reads segments
            </summary>
            <exception cref="T:com.drew.imaging.jpg.JpegProcessingException">for any problems processing the Jpeg data</exception>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentReader.GetJpegInputStream">
            <summary>
            Private helper method to create a BufferedInputStream of Jpeg data 
            from whichever data source was specified upon construction of this instance. 
            </summary>
            <returns>a BufferedStream of Jpeg data</returns>
            <exception cref="T:com.drew.imaging.jpg.JpegProcessingException">for any problems processing the Jpeg data</exception>
        </member>
        <member name="M:com.drew.imaging.jpg.JpegSegmentReader.IsValidJpegHeaderBytes(System.IO.BufferedStream)">
            <summary>
            Helper method that validates the Jpeg aFile'str magic number. 
            </summary>
            <param name="aFileStream">the InputStream to read bytes from, which must be positioned at its start (i.e. no bytes read yet)</param>
            <returns>true if the magic number is Jpeg (0xFFD8)</returns>
            <exception cref="T:com.drew.imaging.jpg.JpegProcessingException">for any problems processing the Jpeg data</exception>
        </member>
        <member name="T:com.drew.imaging.PhotographicConversions">
            <summary>
            Contains helper methods that perform photographic conversions.
            </summary>
        </member>
        <member name="M:com.drew.imaging.PhotographicConversions.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.imaging.PhotographicConversions.ApertureToFStop(System.Double)">
            <summary>
            Converts an aperture value to its corresponding F-stop number.
            </summary>
            <param name="anAperture">the aperture value to convert</param>
            <returns>the F-stop number of the specified aperture</returns>
        </member>
        <member name="M:com.drew.imaging.PhotographicConversions.ShutterSpeedToExposureTime(System.Double)">
            <summary>
            Converts a shutter speed to an exposure time.
            </summary>
            <param name="aShutterSpeed">the shutter speed to convert</param>
            <returns>the exposure time of the specified shutter speed</returns>
        </member>
        <member name="T:com.drew.lang.Rational">
            <summary>
            Created on 6 May 2002, 18:06
            Updated 26 Aug 2002 by Drew
            - Added toSimpleString() method, which returns a simplified and hopefully 
              more readable version of the Rational.  i.e. 2/10 -> 1/5, and 10/2 -> 5
            Modified 29 Oct 2002 (v1.2)
            - Improved toSimpleString() to lcFactor more complex rational numbers into 
              a simpler form i.e. 10/15 -> 2/3
            - toSimpleString() now accepts a boolean flag, 'allowDecimals' which 
              will display the rational number in decimal form if it fits within 5 
              digits i.e. 3/4 -> 0.75 when isAllowDecimal == true
            </summary>
        </member>
        <member name="F:com.drew.lang.Rational.numerator">
            <summary>
            Holds the numerator.
            </summary>
        </member>
        <member name="F:com.drew.lang.Rational.denominator">
            <summary>
            Holds the denominator.
            </summary>
        </member>
        <member name="M:com.drew.lang.Rational.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Rational. 
            Rational objects are immutable, so once you've set your numerator and 
            denominator values here, you're stuck with them! 
            </summary>
            <param name="aNumerator">a numerator</param>
            <param name="aDenominator"> a denominator</param>
        </member>
        <member name="M:com.drew.lang.Rational.DoubleValue">
            <summary>
            Returns the value of the specified number as a double. This may involve rounding. 
            </summary>
            <returns>the numeric value represented by this object after conversion to type double.</returns>
        </member>
        <member name="M:com.drew.lang.Rational.FloatValue">
            <summary>
            Returns the value of the specified number as a float. This may involve rounding.
            </summary>
            <returns>the numeric value represented by this object after conversion to type float.</returns>
        </member>
        <member name="M:com.drew.lang.Rational.ByteValue">
            <summary>
            Returns the value of the specified number as a byte. 
            This may involve rounding or truncation.  
            This implementation simply casts the result of doubleValue() to byte. 
            </summary>
            <returns>the numeric value represented by this object after conversion to type byte.</returns>
        </member>
        <member name="M:com.drew.lang.Rational.IntValue">
            <summary>
            Returns the value of the specified number as an int. 
            This may involve rounding or truncation.
            This implementation simply casts the result of doubleValue() to int. 
            </summary>
            <returns>the numeric value represented by this object after conversion to type int.</returns>
        </member>
        <member name="M:com.drew.lang.Rational.LongValue">
            <summary>
            Returns the value of the specified number as a long.
            This may involve rounding or truncation.
            This implementation simply casts the result of doubleValue() to long.
            </summary>
            <returns>the numeric value represented by this object after conversion to type long.</returns>
        </member>
        <member name="M:com.drew.lang.Rational.ShortValue">
            <summary>
            Returns the value of the specified number as a short. 
            This may involve rounding or truncation.
            This implementation simply casts the result of doubleValue() to short. 
            </summary>
            <returns>the numeric value represented by this object after conversion to type short.</returns>
        </member>
        <member name="M:com.drew.lang.Rational.GetDenominator">
            <summary>
            Returns the denominator. 
            </summary>
            <returns>the denominator.</returns>
        </member>
        <member name="M:com.drew.lang.Rational.GetNumerator">
            <summary>
            Returns the numerator. 
            </summary>
            <returns>the numerator.</returns>
        </member>
        <member name="M:com.drew.lang.Rational.GetReciprocal">
            <summary>
            Returns the reciprocal value of this obejct as a new Rational. 
            </summary>
            <returns>the reciprocal in a new object</returns>
        </member>
        <member name="M:com.drew.lang.Rational.IsInteger">
            <summary>
            Checks if this rational number is an Integer, either positive or negative. 
            </summary>
            <returns>true is Rational is an integer, false otherwize</returns>
        </member>
        <member name="M:com.drew.lang.Rational.ToString">
            <summary>
            Returns a string representation of the object of form numerator/denominator. 
            </summary>
            <returns>a string representation of the object.</returns>
        </member>
        <member name="M:com.drew.lang.Rational.ToSimpleString(System.Boolean)">
            <summary>
            Returns the simplest represenation of this Rational'str value possible. 
            </summary>
            <param name="isAllowDecimal">if true then decimal will be showned</param>
            <returns>the simplest represenation of this Rational'str value possible.</returns>
        </member>
        <member name="M:com.drew.lang.Rational.TooComplexForSimplification">
            <summary>
            Decides whether a brute-force simplification calculation should be avoided by comparing the 
            maximum number of possible calculations with some threshold. 
            </summary>
            <returns>true if the simplification should be performed, otherwise false</returns>
        </member>
        <member name="M:com.drew.lang.Rational.Equals(System.Object)">
            <summary>
            Compares two Rational instances, returning true if they are mathematically equivalent. 
            </summary>
            <param name="anObject">the Rational to compare this instance to.</param>
            <returns>true if instances are mathematically equivalent, otherwise false. Will also return false if anObject is not an instance of Rational.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.drew.lang.Rational.GetSimplifiedInstance" -->
        <member name="M:com.drew.lang.Rational.GetHashCode">
            <summary>
            Returns the hash code of the object
            </summary>
            <returns>the hash code of the object</returns>
        </member>
        <member name="T:com.drew.imaging.jpg.DefaultTagDescriptor">
            <summary>
            A default tag descriptor class
            </summary>
        </member>
        <member name="T:com.drew.metadata.AbstractTagDescriptor">
            <summary>
            This abstract class represent the mother class of all tag descriptor.
            </summary>
        </member>
        <member name="F:com.drew.metadata.AbstractTagDescriptor.BUNDLE">
            <summary>
            Contains all words.
            </summary>
        </member>
        <member name="M:com.drew.metadata.AbstractTagDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aDirectory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.AbstractTagDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.imaging.jpg.DefaultTagDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aDirectory">its directory</param>
        </member>
        <member name="M:com.drew.imaging.jpg.DefaultTagDescriptor.GetTagName(System.Int32)">
            <summary>
            Gets the tag name
            </summary>
            <param name="aTagType">the specified tag type</param>
            <returns>the tag name</returns>
        </member>
        <member name="M:com.drew.imaging.jpg.DefaultTagDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="T:com.drew.metadata.AbstractDirectory">
            <summary>
            Base class for all Metadata directory types with supporting 
            methods for setting and getting tag values.
            </summary>
        </member>
        <member name="F:com.drew.metadata.AbstractDirectory.tagMap">
            <summary>
            Map of values hashed by type identifiers. 
            </summary>
        </member>
        <member name="F:com.drew.metadata.AbstractDirectory.descriptor">
            <summary>
            The descriptor used to interperet tag values.
            </summary>
        </member>
        <member name="F:com.drew.metadata.AbstractDirectory.definedTagList">
            <summary>
            A convenient list holding tag values in the order in which they were stored. This is used for creation of an iterator, and for counting the number of defined tags. 
            </summary>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.#ctor">
            <summary>
            Creates a new Directory. 
            </summary>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.ContainsTag(System.Int32)">
            <summary>
            Indicates whether the specified tag type has been set. 
            </summary>
            <param name="aTagType">the tag type to check for</param>
            <returns>true if a value exists for the specified tag type, false if not</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetTagIterator">
            <summary>
            Returns an Iterator of Tag instances that have been set in this Directory. 
            </summary>
            <returns>an Iterator of Tag instances</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetTagCount">
            <summary>
            Returns the number of tags set in this Directory. 
            </summary>
            <returns>the number of tags set in this Directory</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.SetDescriptor(com.drew.metadata.AbstractTagDescriptor)">
            <summary>
            Sets the descriptor used to interperet tag values. 
            </summary>
            <param name="aDescriptor">the descriptor used to interperet tag values</param>
            <exception cref="T:System.NullReferenceException">if aDescriptor is null</exception>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.AddError(System.String)">
            <summary>
            Adds an error
            </summary>
            <param name="aMessage">the error aMessage</param>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.HasErrors">
            <summary>
            Checks if there is error
            </summary>
            <returns>true if there is error, false otherwise</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetErrors">
            <summary>
            Gets an enumerator upon errors
            </summary>
            <returns>en enumerator for errors</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetErrorCount">
            <summary>
            Gives the number of errors
            </summary>
            <returns>the number of errors</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.SetIntArray(System.Int32,System.Int32[])">
            <summary>
            Sets an int array for the specified tag. 
            </summary>
            <param name="aTagType">the tag identifier</param>
            <param name="someInts">the int array to store</param>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.SetObject(System.Int32,System.Object)">
            <summary>
            Helper method, containing common functionality for all 'add' methods.
            </summary>
            <param name="aTagType">the tag value as an int</param>
            <param name="aValue">the value for the specified tag</param>
            <exception cref="T:System.NullReferenceException">if aValue is null</exception>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetInt(System.Int32)">
            <summary>
            Returns the specified tag value as an int, if possible. 
            </summary>
            <param name="aTagType">the specified tag type</param>
            <returns>the specified tag value as an int, if possible.</returns>
            <exception cref="T:com.drew.metadata.MetadataException">if tag not found</exception>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetStringArray(System.Int32)">
            <summary>
            Gets the specified tag value as a string array, if possible.  Only supported where the tag is set as string[], string, int[], byte[] or Rational[].
            </summary>
            <param name="aTagType">the tag identifier</param>
            <returns>the tag value as an array of Strings</returns>
            <exception cref="T:com.drew.metadata.MetadataException">if tag not found or if it cannot be represented as a string[]</exception>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetIntArray(System.Int32)">
            <summary>
            Gets the specified tag value as an int array, if possible.  Only supported where the tag is set as string, int[], byte[] or Rational[]. 
            </summary>
            <param name="aTagType">the tag identifier</param>
            <returns>the tag value as an int array</returns>
            <exception cref="T:com.drew.metadata.MetadataException">if tag not found or if it cannot be represented as a int[]</exception>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetByteArray(System.Int32)">
            <summary>
            Gets the specified tag value as an byte array, if possible.  Only supported where the tag is set as string, int[], byte[] or Rational[].
            </summary>
            <param name="aTagType">the tag identifier</param>
            <returns>the tag value as a byte array</returns>
            <exception cref="T:com.drew.metadata.MetadataException">if tag not found or if it cannot be represented as a byte[]</exception>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetDouble(System.Int32)">
            <summary>
            Returns the specified tag value as a double, if possible. 
            </summary>
            <param name="aTagType">the specified tag type</param>
            <returns>the specified tag value as a double, if possible.</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetFloat(System.Int32)">
            <summary>
            Returns the specified tag value as a float, if possible. 
            </summary>
            <param name="aTagType">the specified tag type</param>
            <returns>the specified tag value as a float, if possible.</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetLong(System.Int32)">
            <summary>
            Returns the specified tag value as a long, if possible. 
            </summary>
            <param name="aTagType">the specified tag type</param>
            <returns>the specified tag value as a long, if possible.</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetBoolean(System.Int32)">
            <summary>
            Returns the specified tag value as a boolean, if possible. 
            </summary>
            <param name="aTagType">the specified tag type</param>
            <returns>the specified tag value as a boolean, if possible.</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetDate(System.Int32)">
            <summary>
            Returns the specified tag value as a date, if possible. 
            </summary>
            <param name="aTagType">the specified tag type</param>
            <returns>the specified tag value as a date, if possible.</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetRational(System.Int32)">
            <summary>
            Returns the specified tag value as a rational, if possible. 
            </summary>
            <param name="aTagType">the specified tag type</param>
            <returns>the specified tag value as a rational, if possible.</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetRationalArray(System.Int32)">
            <summary>
            Gets the specified tag value as a rational array, if possible.  Only supported where the tag is set as Rational[].
            </summary>
            <param name="aTagType">the tag identifier</param>
            <returns>the tag value as a rational array</returns>
            <exception cref="T:com.drew.metadata.MetadataException">if tag not found or if it cannot be represented as a rational[]</exception>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetString(System.Int32)">
            <summary>
            Returns the specified tag value as a string.
            This value is the 'raw' value.
            A more presentable decoding of this value may be obtained from the corresponding Descriptor.
            </summary>
            <param name="aTagType">the specified tag type</param>
            <returns>the string reprensentation of the tag value, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetObject(System.Int32)">
            <summary>
            Returns the object hashed for the particular tag type specified, if available. 
            </summary>
            <param name="aTagType">the tag type identifier</param>
            <returns>the tag value as an object if available, else null</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetTagName(System.Int32)">
            <summary>
            Returns the name of a specified tag as a string. 
            </summary>
            <param name="aTagType">the tag type identifier</param>
            <returns>the tag name as a string</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetDescription(System.Int32)">
            <summary>
            Provides a description of a tag value using the descriptor set by setDescriptor(Descriptor). 
            </summary>
            <param name="aTagType">the tag type identifier</param>
            <returns>the tag value'str description as a string</returns>
            <exception cref="T:com.drew.metadata.MetadataException">if a descriptor hasn't been set, or if an error occurs during calculation of the description within the Descriptor</exception>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="M:com.drew.metadata.AbstractDirectory.FillTagMap(System.Type,com.utils.ResourceBundle)">
            <summary>
            Fill the map with all (TAG_xxx value, BUNDLE[TAG_xxx name]).
            </summary>
            <param name="aType">where to look for fields like TAG_xxx</param>
            <param name="aTagMap">where to put tag found</param>
        </member>
        <member name="T:com.drew.metadata.exif.CanonDescriptor">
            <summary>
            Tag descriptor for a Canon camera
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aDirectory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetMenuButtonReturnPositionDescription">
            <summary>
            Returns the menu button return position Description. 
            </summary>
            <returns>the menu button return position Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetSetButtonFunctionWhenShootingDescription">
            <summary>
            Returns the set button function when shooting Description. 
            </summary>
            <returns>the set button function when shooting Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetSensorCleaningDescription">
            <summary>
            Returns the sensor cleaning Description. 
            </summary>
            <returns>the sensor cleaning Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetFillFlashReductionDescription">
            <summary>
            Returns the fill flash reduction Description. 
            </summary>
            <returns>the fill flash reduction Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetLensAutoFocusStopButtonDescription">
            <summary>
            Returns the lens auto focus stop Description. 
            </summary>
            <returns>the lens auto focus stop Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetShutterCurtainSyncDescription">
            <summary>
            Returns the shutter curtain sync Description. 
            </summary>
            <returns>the shutter curtain sync Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetAutoExposureBrackettingSequenceAndAutoCancellationDescription">
            <summary>
            Returns the auto exposure bracketting sequence and auto cancellation Description. 
            </summary>
            <returns>the auto exposure bracketting sequence and auto cancellation Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetShutterSpeedInAvModeDescription">
            <summary>
            Returns the shutter speed in Av mode Description. 
            </summary>
            <returns>the shutter speed in Av mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetAutoFocusAssistLightDescription">
            <summary>
            Returns the auto focus assist light Description. 
            </summary>
            <returns>the auto focus assist light Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetTvAndAvExposureLevelDescription">
            <summary>
            Returns the Tv and Av exposure level Description. 
            </summary>
            <returns>the Tv and Av exposure level Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetMirrorLockupDescription">
            <summary>
            Returns the mirror lock up Description. 
            </summary>
            <returns>the mirror lock up Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetShutterAutoExposureLockButtonDescription">
            <summary>
            Returns the shutter auto exposure lock button Description. 
            </summary>
            <returns>the shutter auto exposure lock button Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetLongExposureNoiseReductionDescription">
            <summary>
            Returns the long exposure noise reduction Description. 
            </summary>
            <returns>the long exposure noise reduction Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetQualityDescription">
            <summary>
            Returns the quality Description. 
            </summary>
            <returns>the quality Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetDigitalZoomDescription">
            <summary>
            Returns the digital zoom Description. 
            </summary>
            <returns>the digital zoom Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetFocusTypeDescription">
            <summary>
            Returns the focus type Description. 
            </summary>
            <returns>the focus type Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetFlashActivityDescription">
            <summary>
            Returns the Flash actvity  Description. 
            </summary>
            <returns>the Flash activity Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetFlashBiasDescription">
            <summary>
            Returns the Flash Bias Description. 
            </summary>
            <returns>the Flash Bias Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetAfPointUsedDescription">
            <summary>
            Returns Af Point Used Description. 
            </summary>
            <returns>the Af Point Used Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetWhiteBalanceDescription">
            <summary>
            Returns White Balance Description. 
            </summary>
            <returns>the White Balance Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetFocusMode2Description">
            <summary>
            Returns Focus Mode 2 description. 
            </summary>
            <returns>the Focus Mode 2 description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetFlashDetailsDescription">
            <summary>
            Returns Flash Details description. 
            </summary>
            <returns>the Flash Details description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetFocalUnitsPerMillimetreDescription">
            <summary>
            Returns Focal Units Per Millimetre description. 
            </summary>
            <returns>the Focal Units Per Millimetre description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetShortFocalLengthDescription">
            <summary>
            Returns Short Focal Length description. 
            </summary>
            <returns>the Short Focal Length description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetLongFocalLengthDescription">
            <summary>
            Returns Long Focal Length description. 
            </summary>
            <returns>the Long Focal Length description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetExposureModeDescription">
            <summary>
            Returns Exposure Mode description. 
            </summary>
            <returns>the Exposure Mode description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetAfPointSelectedDescription">
            <summary>
            Returns Af Point Selected description. 
            </summary>
            <returns>the Af Point Selected description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetMeteringModeDescription">
            <summary>
            Returns Metering Mode description. 
            </summary>
            <returns>the Metering Mode description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetIsoDescription">
            <summary>
            Returns ISO description. 
            </summary>
            <returns>the ISO description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetSharpnessDescription">
            <summary>
            Returns Sharpness description. 
            </summary>
            <returns>the Sharpness description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetSaturationDescription">
            <summary>
            Returns Saturation description. 
            </summary>
            <returns>the Saturation description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetContrastDescription">
            <summary>
            Returns Contrast description. 
            </summary>
            <returns>the Contrast description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetEasyShootingModeDescription">
            <summary>
            Returns Easy Shooting Mode description. 
            </summary>
            <returns>the Easy Shooting Mode description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetImageSizeDescription">
            <summary>
            Returns Image Size description. 
            </summary>
            <returns>the Image Size description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetFocusMode1Description">
            <summary>
            Returns Focus Mode 1 description. 
            </summary>
            <returns>the Focus Mode 1 description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetContinuousDriveModeDescription">
            <summary>
            Returns Continuous Drive Mode description. 
            </summary>
            <returns>the Continuous Drive Mode description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetFlashModeDescription">
            <summary>
            Returns Flash Mode description. 
            </summary>
            <returns>the Flash Mode description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetSelfTimerDelayDescription">
            <summary>
            Returns Self Timer Delay description. 
            </summary>
            <returns>the Self Timer Delay description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDescriptor.GetMacroModeDescription">
            <summary>
            Returns Macro Mode description. 
            </summary>
            <returns>the Macro Mode description</returns>
        </member>
        <member name="T:com.drew.metadata.exif.CanonDirectory">
            <summary>
            This class represents CANON marker note.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_SERIAL_NUMBER">
            <summary>
             To display serial number as on camera use: printf( "%04X%05d", highbyte, lowbyte )
             TODO handle this in CanonMakernoteDescriptor
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_MACRO_MODE">
            <summary>
             1 = Macro
             2 = Normal
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_QUALITY">
            <summary>
             2 = Normal
             3 = Fine
             5 = Superfine
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_FLASH_MODE">
            <summary>
             0 = Flash Not Fired
             1 = Auto
             2 = On
             3 = Red Eye Reduction
             4 = Slow Synchro
             5 = Auto + Red Eye Reduction
             6 = On + Red Eye Reduction
             16 = External Flash
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_CONTINUOUS_DRIVE_MODE">
            <summary>
             0 = Single Frame or Timer Mode
             1 = Continuous
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_FOCUS_MODE_1">
            <summary>
             0 = One-Shot
             1 = AI Servo
             2 = AI Focus
             3 = Manual Focus
             4 = Single
             5 = Continuous
             6 = Manual Focus
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_IMAGE_SIZE">
            <summary>
             0 = Large
             1 = Medium
             2 = Small
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_EASY_SHOOTING_MODE" -->
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_DIGITAL_ZOOM">
            <summary>
             0 = No Digital Zoom
             1 = 2x
             2 = 4x
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_CONTRAST">
            <summary>
             0 = Normal
             1 = High
             65535 = Low
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_SATURATION">
            <summary>
             0 = Normal
             1 = High
             65535 = Low
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_SHARPNESS">
            <summary>
             0 = Normal
             1 = High
             65535 = Low
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_ISO">
            <summary>
             0 = Check ISOSpeedRatings EXIF tag for ISO Speed
             15 = Auto ISO
             16 = ISO 50
             17 = ISO 100
             18 = ISO 200
             19 = ISO 400
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_METERING_MODE">
            <summary>
             3 = Evaluative
             4 = Partial
             5 = Center Weighted
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_FOCUS_TYPE">
            <summary>
             0 = Manual
             1 = Auto
             3 = Close-up (Macro)
             8 = Locked (Pan Mode)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_AF_POINT_SELECTED">
            <summary>
             12288 = None (Manual Focus)
             12289 = Auto Selected
             12290 = Right
             12291 = Center
             12292 = Left
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_EXPOSURE_MODE">
            <summary>
             0 = Easy Shooting (See Easy Shooting Mode)
             1 = Program
             2 = Tv-Priority
             3 = Av-Priority
             4 = Manual
             5 = A-DEP
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_FLASH_ACTIVITY">
            <summary>
             0 = Flash Did Not Fire
             1 = Flash Fired
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE1_FOCUS_MODE_2">
            <summary>
             0 = Focus Mode: Single
             1 = Focus Mode: Continuous
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE2_WHITE_BALANCE">
            <summary>
             0 = Auto
             1 = Sunny
             2 = Cloudy
             3 = Tungsten
             4 = Fluorescent
             5 = Flash
             6 = Custom
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_STATE2_FLASH_BIAS">
            <summary>
             The value of this tag may be translated into a flash bias value, in EV.
            
             0xffc0 = -2 EV
             0xffcc = -1.67 EV
             0xffd0 = -1.5 EV
             0xffd4 = -1.33 EV
             0xffe0 = -1 EV
             0xffec = -0.67 EV
             0xfff0 = -0.5 EV
             0xfff4 = -0.33 EV
             0x0000 = 0 EV
             0x000c = 0.33 EV
             0x0010 = 0.5 EV
             0x0014 = 0.67 EV
             0x0020 = 1 EV
             0x002c = 1.33 EV
             0x0030 = 1.5 EV
             0x0034 = 1.67 EV
             0x0040 = 2 EV 
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_CUSTOM_FUNCTION_LONG_EXPOSURE_NOISE_REDUCTION">
            <summary>
             Long Exposure Noise Reduction
             0 = Off
             1 = On
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_CUSTOM_FUNCTION_SHUTTER_AUTO_EXPOSURE_LOCK_BUTTONS">
            <summary>
             Shutter/Auto Exposure-lock buttons
             0 = AF/AE lock
             1 = AE lock/AF
             2 = AF/AF lock
             3 = AE+release/AE+AF
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_CUSTOM_FUNCTION_MIRROR_LOCKUP">
            <summary>
             Mirror lockup
             0 = Disable
             1 = Enable
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_CUSTOM_FUNCTION_TV_AV_AND_EXPOSURE_LEVEL">
            <summary>
             Tv/Av and exposure level
             0 = 1/2 stop
             1 = 1/3 stop
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_CUSTOM_FUNCTION_AF_ASSIST_LIGHT">
            <summary>
             AF-assist light
             0 = On (Auto)
             1 = Off
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_CUSTOM_FUNCTION_SHUTTER_SPEED_IN_AV_MODE">
            <summary>
             Shutter speed in Av mode
             0 = Automatic
             1 = 1/200 (fixed)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_CUSTOM_FUNCTION_BRACKETTING">
            <summary>
             Auto-Exposure Bracketting sequence/auto cancellation
             0 = 0,-,+ / Enabled
             1 = 0,-,+ / Disabled
             2 = -,0,+ / Enabled
             3 = -,0,+ / Disabled
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_CUSTOM_FUNCTION_SHUTTER_CURTAIN_SYNC">
            <summary>
             Shutter Curtain Sync
             0 = 1st Curtain Sync
             1 = 2nd Curtain Sync
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_CUSTOM_FUNCTION_AF_STOP">
            <summary>
             Lens Auto-Focus stop button Function Switch
             0 = AF stop
             1 = Operate AF
             2 = Lock AE and start timer
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_CUSTOM_FUNCTION_FILL_FLASH_REDUCTION">
            <summary>
             Auto reduction of fill flash
             0 = Enable
             1 = Disable
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_CUSTOM_FUNCTION_MENU_BUTTON_RETURN">
            <summary>
             Menu button return position
             0 = Top
             1 = Previous (volatile)
             2 = Previous
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_CUSTOM_FUNCTION_SET_BUTTON_FUNCTION">
            <summary>
             SET button function when shooting
             0 = Not Assigned
             1 = Change Quality
             2 = Change ISO Speed
             3 = Select Parameters
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CanonDirectory.TAG_CANON_CUSTOM_FUNCTION_SENSOR_CLEANING">
            <summary>
             Sensor cleaning
             0 = Disable
             1 = Enable
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDirectory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CanonDirectory.SetIntArray(System.Int32,System.Int32[])">
            <summary>
            We need special handling for selected tags.
            </summary>
            <param name="aTagType">the tag type</param>
            <param name="someInts">what to set</param>
        </member>
        <member name="T:com.drew.metadata.exif.CasioType1Descriptor">
            <summary>
            Tag descriptor for a casio camera
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aDirectory">a base.directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.GetCcdSensitivityDescription">
            <summary>
            Returns the Ccd Sensitivity Description. 
            </summary>
            <returns>the Ccd Sensitivity Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.GetSaturationDescription">
            <summary>
            Returns the saturation Description. 
            </summary>
            <returns>the saturation Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.GetContrastDescription">
            <summary>
            Returns the contrast Description. 
            </summary>
            <returns>the contrast Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.GetSharpnessDescription">
            <summary>
            Returns the sharpness Description. 
            </summary>
            <returns>the sharpness Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.GetDigitalZoomDescription">
            <summary>
            Returns the Digital Zoom Description. 
            </summary>
            <returns>the Digital Zoom Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.GetWhiteBalanceDescription">
            <summary>
            Returns the White Balance Description. 
            </summary>
            <returns>the White Balance Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.GetObjectDistanceDescription">
            <summary>
            Returns the Object Distance Description. 
            </summary>
            <returns>the Object Distance Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.GetFlashIntensityDescription">
            <summary>
            Returns the Flash Intensity Description. 
            </summary>
            <returns>the Flash Intensity Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.GetFlashModeDescription">
            <summary>
            Returns the Flash Mode Description. 
            </summary>
            <returns>the Flash Mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.GetFocusingModeDescription">
            <summary>
            Returns the Focusing Mode Description. 
            </summary>
            <returns>the Focusing Mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.GetQualityDescription">
            <summary>
            Returns the quality Description. 
            </summary>
            <returns>the quality Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.GetFocussingModeDescription">
            <summary>
            Returns the Focussing Mode Description. 
            </summary>
            <returns>the Focussing Mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Descriptor.GetRecordingModeDescription">
            <summary>
            Returns the Recording Mode Description. 
            </summary>
            <returns>the Recording Mode Description.</returns>
        </member>
        <member name="T:com.drew.metadata.exif.CasioType1Directory">
            <summary>
            This class represents CASIO marker note.
            </summary>
        </member>
        <member name="T:com.drew.metadata.exif.AbstractCasioTypeDirectory">
            <summary>
            Mother class for all CasioMarkerNote directory.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.AbstractCasioTypeDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Directory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType1Directory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.exif.CasioType2Descriptor">
            <summary>
            Tag descriptor for a casio camera type 2
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aDirectory">a base.directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetFilterDescription">
            <summary>
            Returns filter Description. 
            </summary>
            <returns>the filter Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetEnhancementDescription">
            <summary>
            Returns enhancement Description. 
            </summary>
            <returns>the enhancement Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetColorModeDescription">
            <summary>
            Returns color mode Description. 
            </summary>
            <returns>the color mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetCcdIsoSensitivityDescription">
            <summary>
            Returns CCD ISO sensitivity Description. 
            </summary>
            <returns>the CCD ISO sensitivity Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetBestShotModeDescription">
            <summary>
            Returns best shot mode Description. 
            </summary>
            <returns>the best shot mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetTimeZoneDescription">
            <summary>
            Returns time zone Description. 
            </summary>
            <returns>the time zone Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetFocusMode2Description">
            <summary>
            Returns focus mode 2 Description. 
            </summary>
            <returns>the focus mode 2 Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetQualityDescription">
            <summary>
            Returns quality description Description. 
            </summary>
            <returns>the quality description Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetSelfTimerDescription">
            <summary>
            Returns self timer Description. 
            </summary>
            <returns>the self timer Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetRecordModeDescription">
            <summary>
            Returns record mode Description. 
            </summary>
            <returns>the record mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetFlashDistanceDescription">
            <summary>
            Returns flash distance Description. 
            </summary>
            <returns>the flash distance Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetObjectDistanceDescription">
            <summary>
            Returns object distance Description. 
            </summary>
            <returns>the object distance Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetWhiteBalance2Description">
            <summary>
            Returns white balance 2 Description. 
            </summary>
            <returns>the white balance 2 Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetWhiteBalanceBiasDescription">
            <summary>
            Returns white balance bias Description. 
            </summary>
            <returns>the white balance bias Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetCasioPreviewThumbnailDescription">
            <summary>
            Returns casio preview thumbnail Description. 
            </summary>
            <returns>the casio preview thumbnail Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetPrintImageMatchingInfoDescription">
            <summary>
            Returns Print Image Matching Info Description. 
            </summary>
            <returns>the Print Image Matching Info Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetSharpnessDescription">
            <summary>
            Returns sharpness description Description. 
            </summary>
            <returns>the sharpness description Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetContrastDescription">
            <summary>
            Returns contrast Description. 
            </summary>
            <returns>the contrast Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetSaturationDescription">
            <summary>
            Returns saturation Description. 
            </summary>
            <returns>the saturation Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetFocalLengthDescription">
            <summary>
            Returns focal length Description. 
            </summary>
            <returns>the focal length Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetWhiteBalance1Description">
            <summary>
            Returns white balance 1 Description. 
            </summary>
            <returns>the white balance 1 Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetIsoSensitivityDescription">
            <summary>
            Returns ISO sensitivity Description. 
            </summary>
            <returns>the ISO sensitivity Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetFocusMode1Description">
            <summary>
            Returns focus mode 1 Description. 
            </summary>
            <returns>the focus mode 1 Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetImageSizeDescription">
            <summary>
            Returns image size Description. 
            </summary>
            <returns>the image size Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetQualityModeDescription">
            <summary>
            Returns quality mode Description. 
            </summary>
            <returns>the quality mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetThumbnailOffsetDescription">
            <summary>
            Returns thumbnail lcOffset Description. 
            </summary>
            <returns>the thumbnail lcOffset Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetThumbnailSizeDescription">
            <summary>
            Returns thumbnail size Description. 
            </summary>
            <returns>the thumbnail size Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Descriptor.GetThumbnailDimensionsDescription">
            <summary>
            Returns thumbnail dimension Description. 
            </summary>
            <returns>the thumbnail dimension Description.</returns>
        </member>
        <member name="T:com.drew.metadata.exif.CasioType2Directory">
            <summary>
            This class represents CASIO marker note type 2.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_THUMBNAIL_DIMENSIONS">
            <summary>
            2 values - x,y dimensions in pixels.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_THUMBNAIL_SIZE">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_THUMBNAIL_OFFSET">
            <summary>
            Offset of Preview Thumbnail
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_QUALITY_MODE">
            <summary>
            1 = Fine
            2 = Super Fine
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_IMAGE_SIZE">
            <summary>
            0 = 640 x 480 pixels
            4 = 1600 x 1200 pixels
            5 = 2048 x 1536 pixels
            20 = 2288 x 1712 pixels
            21 = 2592 x 1944 pixels
            22 = 2304 x 1728 pixels
            36 = 3008 x 2008 pixels
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_FOCUS_MODE_1">
            <summary>
            0 = Normal
            1 = Macro
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_ISO_SENSITIVITY">
            <summary>
            3 = 50
            4 = 64
            6 = 100
            9 = 200
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_WHITE_BALANCE_1">
            <summary>
            0 = Auto
            1 = Daylight
            2 = Shade
            3 = Tungsten
            4 = Fluorescent
            5 = Manual
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_FOCAL_LENGTH">
            <summary>
            Units are tenths of a millimetre
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_SATURATION">
            <summary>
            0 = -1
            1 = Normal
            2 = +1
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_CONTRAST">
            <summary>
            0 = -1 
            1 = Normal 
            2 = +1
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_SHARPNESS">
            <summary>
            0 = -1
            1 = Normal
            2 = +1
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_PRINT_IMAGE_MATCHING_INFO">
            <summary>
            See PIM specification here: http://www.ozhiker.com/electronics/pjmt/jpeg_info/pim.html
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_CASIO_PREVIEW_THUMBNAIL">
            <summary>
            Alternate thumbnail lcOffset
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_WHITE_BALANCE_2">
            <summary>
            12 = Flash
            0 = Manual
            1 = Auto?
            4 = Flash?
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_OBJECT_DISTANCE">
            <summary>
            Units are millimetres
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_FLASH_DISTANCE">
            <summary>
            0 = Off
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_RECORD_MODE">
            <summary>
            2 = Normal Mode
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_SELF_TIMER">
            <summary>
            1 = Off?
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_QUALITY">
            <summary>
            3 = Fine
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_FOCUS_MODE_2">
            <summary>
            1 = Fixation
            6 = Multi-Area Auto Focus
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_CCD_ISO_SENSITIVITY">
            <summary>
            0 = Off
            1 = On?
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_COLOR_MODE">
            <summary>
            0 = Off
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_ENHANCEMENT">
            <summary>
            0 = Off
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.CasioType2Directory.TAG_CASIO_TYPE2_FILTER">
            <summary>
            0 = Off
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Directory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.CasioType2Directory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.exif.SonyDirectory">
            <summary>
            The sony directory class.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.SonyDirectory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.SonyDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.exif.SonyDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.exif.SonyDescriptor">
            <summary>
            Tag descriptor for sony
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.SonyDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.SonyDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="T:com.drew.metadata.exif.PentaxDirectory">
            <summary>
            The pentax directory class.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.PentaxDirectory.TAG_PENTAX_CAPTURE_MODE">
            <summary>
             0 = Auto
             1 = Night-scene
             2 = Manual
             4 = Multiple
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.PentaxDirectory.TAG_PENTAX_QUALITY_LEVEL">
            <summary>
             0 = Good
             1 = Better
             2 = Best
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.PentaxDirectory.TAG_PENTAX_FOCUS_MODE">
            <summary>
             2 = Custom
             3 = Auto
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.PentaxDirectory.TAG_PENTAX_FLASH_MODE">
            <summary>
             1 = Auto
             2 = Flash on
             4 = Flash off
             6 = Red-eye Reduction
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.PentaxDirectory.TAG_PENTAX_WHITE_BALANCE">
            <summary>
             0 = Auto
             1 = Daylight
             2 = Shade
             3 = Tungsten
             4 = Fluorescent
             5 = Manual
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.PentaxDirectory.TAG_PENTAX_DIGITAL_ZOOM">
            <summary>
             (0 = Off)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.PentaxDirectory.TAG_PENTAX_SHARPNESS">
            <summary>
             0 = Normal
             1 = Soft
             2 = Hard
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.PentaxDirectory.TAG_PENTAX_CONTRAST">
            <summary>
             0 = Normal
             1 = Low
             2 = High
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.PentaxDirectory.TAG_PENTAX_SATURATION">
            <summary>
             0 = Normal
             1 = Low
             2 = High
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.PentaxDirectory.TAG_PENTAX_ISO_SPEED">
            <summary>
             10 = ISO 100
             16 = ISO 200
             100 = ISO 100
             200 = ISO 200
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.PentaxDirectory.TAG_PENTAX_COLOR" -->
        <member name="F:com.drew.metadata.exif.PentaxDirectory.TAG_PENTAX_PRINT_IMAGE_MATCHING_INFO">
            <summary>
             See Print Image Matching for specification.
             http://www.ozhiker.com/electronics/pjmt/jpeg_info/pim.html
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.PentaxDirectory.TAG_PENTAX_TIME_ZONE">
            <summary>
             (String).
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.PentaxDirectory.TAG_PENTAX_DAYLIGHT_SAVINGS">
            <summary>
             (String).
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDirectory.InitTagMap">
            <summary>
            Initialize the tag map.
            </summary>
            <returns>the tag map</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDirectory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.exif.PentaxDescriptor">
            <summary>
            Tag descriptor for pentax
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDescriptor.GetColorDescription">
            <summary>
            Returns the color Description. 
            </summary>
            <returns>the color Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDescriptor.GetIsoSpeedDescription">
            <summary>
            Returns the iso speed Description. 
            </summary>
            <returns>the iso speed Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDescriptor.GetSaturationDescription">
            <summary>
            Returns the saturation Description. 
            </summary>
            <returns>the saturation Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDescriptor.GetContrastDescription">
            <summary>
            Returns the contrast Description. 
            </summary>
            <returns>the contrast Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDescriptor.GetSharpnessDescription">
            <summary>
            Returns the sharpness Description. 
            </summary>
            <returns>the sharpness Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDescriptor.GetDigitalZoomDescription">
            <summary>
            Returns the digial zoom Description. 
            </summary>
            <returns>the digital zoom Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDescriptor.GetWhiteBalanceDescription">
            <summary>
            Returns the white balance Description. 
            </summary>
            <returns>the white balance Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDescriptor.GetFlashModeDescription">
            <summary>
            Returns the flash mode Description. 
            </summary>
            <returns>the dlash mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDescriptor.GetFocusModeDescription">
            <summary>
            Returns the focus mode Description. 
            </summary>
            <returns>the focus mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDescriptor.GetQualityLevelDescription">
            <summary>
            Returns the quality level Description. 
            </summary>
            <returns>the quality level Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDescriptor.GetCaptureModeDescription">
            <summary>
            Returns the capture mode Description. 
            </summary>
            <returns>the capture mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PentaxDescriptor.GetPrintImageMatchingInfoDescription">
            <summary>
            Returns the print image matching info Description. 
            </summary>
            <returns>the print image matching info Description.</returns>
        </member>
        <member name="T:com.drew.metadata.exif.PanasonicDescriptor">
            <summary>
            Tag descriptor for Panasonic
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.PanasonicDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.PanasonicDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PanasonicDescriptor.GetPrintImageMatchingInfoDescription">
            <summary>
            Returns the print image matching info Description. 
            </summary>
            <returns>the print image matching info Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PanasonicDescriptor.GetMacroModeDescription">
            <summary>
            Returns the macro mode Description. 
            </summary>
            <returns>the macro mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PanasonicDescriptor.GetRecordModeDescription">
            <summary>
            Returns record mode Description. 
            </summary>
            <returns>the record mode Description.</returns>
        </member>
        <member name="T:com.drew.metadata.exif.PanasonicDirectory">
            <summary>
            The panasonic directory class.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.PanasonicDirectory.TAG_PANASONIC_MACRO_MODE">
            <summary>
             1 = On
             2 = Off
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.PanasonicDirectory.TAG_PANASONIC_RECORD_MODE">
            <summary>
             1 = Normal
             2 = Portrait
             9 = Macro 
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.PanasonicDirectory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.PanasonicDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.exif.PanasonicDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.exif.KyoceraDirectory">
            <summary>
            The GPS Directory class
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.KyoceraDirectory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.KyoceraDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.exif.KyoceraDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.exif.KyoceraDescriptor">
            <summary>
            Tag descriptor for Kyocera
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.KyoceraDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.KyoceraDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.KyoceraDescriptor.GetPrintImageMatchingInfoDescription">
            <summary>
            Returns Print Image Matching (PIM) Info Description. 
            </summary>
            <returns>the Print Image Matching (PIM) Info Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.KyoceraDescriptor.GetProprietaryThumbnailDataDescription">
            <summary>
            Returns Proprietary Thumbnail Format Data Description. 
            </summary>
            <returns>the Proprietary Thumbnail Format Data Description.</returns>
        </member>
        <member name="T:com.drew.metadata.exif.KodakDirectory">
            <summary>
            The GPS Directory class
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.KodakDirectory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.KodakDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.exif.KodakDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.exif.KodakDescriptor">
            <summary>
            Tag descriptor for Kodak
            
            Thanks to David Carson for the initial version of this class.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.KodakDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.KodakDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="T:com.drew.metadata.exif.DataFormat">
            <summary>
            Data format class. Will be used one day ;-)
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.DataFormat.FromValue(System.Int32)">
            <summary>
            Builds a data format
            </summary>
            <param name="aValue">the value you want (BYTE, SINGLE, ...)</param>
            <returns>the data format</returns>
        </member>
        <member name="M:com.drew.metadata.exif.DataFormat.#ctor(System.String,System.Int32)">
            <summary>
            Builds a data
            </summary>
            <param name="name">the name of the data</param>
            <param name="aValue">the value of the data</param>
        </member>
        <member name="M:com.drew.metadata.exif.DataFormat.GetValue">
            <summary>
            Gets the value of the data (SINGLE, BYTE, ...)
            </summary>
            <returns>the value of the object (SINGLE, BYTE, ...)</returns>
        </member>
        <member name="M:com.drew.metadata.exif.DataFormat.ToString">
            <summary>
            Gets the name of the data
            </summary>
            <returns>the name of the data</returns>
        </member>
        <member name="T:com.drew.metadata.exif.ExifDescriptor">
            <summary>
            Tag descriptor for almost every images
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDescriptor.allowDecimalRepresentationOfRationals">
            <summary>
            Dictates whether rational values will be represented in decimal format in instances 
            where decimal notation is elegant (such as 1/2 -> 0.5, but not 1/3).
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetCustomRenderedDescription">
            <summary>
            Gets the custom rendered description.
            </summary>
            <returns>The custom rendered description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetExposureModeDescription">
            <summary>
            Gets the exposure mode description.
            </summary>
            <returns>The exposure mode description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetWhiteBalanceModeDescription">
            <summary>
            Gets the white balance mode description.
            </summary>
            <returns>The white balance mode description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetDigitalZoomRatioDescription">
            <summary>
            Gets the digital zoom ratio description.
            </summary>
            <returns>The digital zoom ratio description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.Get35mmFilmEquivFocalLengthDescription">
            <summary>
            Gets the 35mm film equivalent focal length description.
            </summary>
            <returns>The 35mm film equivalent focal length description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetSceneCaptureTypeDescription">
            <summary>
            Gets the scene capture type description.
            </summary>
            <returns>The scene capture type description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetGainControlDescription">
            <summary>
            Gets the gain control description.
            </summary>
            <returns>The gain control description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetContrastDescription">
            <summary>
            Gets the contrast description.
            </summary>
            <returns>The constrast description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.getSubfileTypeDescription">
            <summary>
            Gets the subfile type description.
            </summary>
            <returns>The subfile type description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetNewSubfileTypeDescription">
            <summary>
            Gets the new subfile type description.
            </summary>
            <returns>The new subfile type description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetThresholdingDescription">
            <summary>
            Gets the new thresholding description.
            </summary>
            <returns>The thresholding description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetFillOrderDescription">
            <summary>
            Gets the fill order description.
            </summary>
            <returns>The fill order description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetSubjectDistanceRangeDescription">
            <summary>
            Gets the subject distance range description.
            </summary>
            <returns>The subject distance range description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetSharpnessDescription">
            <summary>
            Gets the sharpness description.
            </summary>
            <returns>The sharpness description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetSaturationDescription">
            <summary>
            Gets the saturation description.
            </summary>
            <returns>The saturation description</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetThumbnailDescription">
            <summary>
            Returns the Thumbnail Description. 
            </summary>
            <returns>the Thumbnail Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetIsoEquivalentDescription">
            <summary>
            Returns the Iso Equivalent Description. 
            </summary>
            <returns>the Iso Equivalent Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetReferenceBlackWhiteDescription">
            <summary>
            Returns the Reference Black White Description. 
            </summary>
            <returns>the Reference Black White Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetExifVersionDescription">
            <summary>
            Returns the Exif Version Description. 
            </summary>
            <returns>the Exif Version Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetFlashPixVersionDescription">
            <summary>
            Returns the Flash Pix Version Description. 
            </summary>
            <returns>the Flash Pix Version Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetSceneTypeDescription">
            <summary>
            Returns the Scene Type Description. 
            </summary>
            <returns>the Scene Type Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetFileSourceDescription">
            <summary>
            Returns the File Source Description. 
            </summary>
            <returns>the File Source Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetExposureBiasDescription">
            <summary>
            Returns the Exposure Bias Description. 
            </summary>
            <returns>the Exposure Bias Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetMaxApertureValueDescription">
            <summary>
            Returns the Max Aperture Value Description. 
            </summary>
            <returns>the Max Aperture Value Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetApertureValueDescription">
            <summary>
            Returns the Aperture Value Description. 
            </summary>
            <returns>the Aperture Value Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetExposureProgramDescription">
            <summary>
            Returns the Exposure Program Description. 
            </summary>
            <returns>the Exposure Program Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetYCbCrSubsamplingDescription">
            <summary>
            Returns the YCbCr Subsampling Description. 
            </summary>
            <returns>the YCbCr Subsampling Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetPlanarConfigurationDescription">
            <summary>
            Returns the Planar Configuration Description. 
            </summary>
            <returns>the Planar Configuration Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetSamplesPerPixelDescription">
            <summary>
            Returns the Samples Per Pixel Description. 
            </summary>
            <returns>the Samples Per Pixel Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetRowsPerStripDescription">
            <summary>
            Returns the Rows Per Strip Description. 
            </summary>
            <returns>the Rows Per Strip Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetStripByteCountsDescription">
            <summary>
            Returns the Strip Byte Counts Description. 
            </summary>
            <returns>the Strip Byte Counts Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetPhotometricInterpretationDescription">
            <summary>
            Returns the Photometric Interpretation Description. 
            </summary>
            <returns>the Photometric Interpretation Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetCompressionDescription">
            <summary>
            Returns the Compression Description. 
            </summary>
            <returns>the Compression Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetBitsPerSampleDescription">
            <summary>
            Returns the Bits Per Sample Description. 
            </summary>
            <returns>the Bits Per Sample Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetThumbnailImageWidthDescription">
            <summary>
            Returns the Thumbnail Image Width Description. 
            </summary>
            <returns>the Thumbnail Image Width Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetThumbnailImageHeightDescription">
            <summary>
            Returns the Thumbnail Image Height Description. 
            </summary>
            <returns>the Thumbnail Image Height Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetFocalPlaneXResolutionDescription">
            <summary>
            Returns the Focal Plane X Resolution Description. 
            </summary>
            <returns>the Focal Plane X Resolution Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetFocalPlaneYResolutionDescription">
            <summary>
            Returns the Focal Plane Y Resolution Description. 
            </summary>
            <returns>the Focal Plane Y Resolution Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetFocalPlaneResolutionUnitDescription">
            <summary>
            Returns the Focal Plane Resolution Unit Description. 
            </summary>
            <returns>the Focal Plane Resolution Unit Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetExifImageWidthDescription">
            <summary>
            Returns the Exif Image Width Description. 
            </summary>
            <returns>the Exif Image Width Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetExifImageHeightDescription">
            <summary>
            Returns the Exif Image Height Description. 
            </summary>
            <returns>the Exif Image Height Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetColorSpaceDescription">
            <summary>
            Returns the Color Space Description. 
            </summary>
            <returns>the Color Space Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetFocalLengthDescription">
            <summary>
            Returns the Focal Length Description. 
            </summary>
            <returns>the Focal Length Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetFlashDescription">
            <summary>
            Returns the Flash Description. 
            </summary>
            <returns>the Flash Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetLightSourceDescription">
            <summary>
            Returns the light source Description. 
            </summary>
            <returns>the light source Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetMeteringModeDescription">
            <summary>
            Returns the Metering Mode Description. 
            </summary>
            <returns>the Metering Mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetSubjectDistanceDescription">
            <summary>
            Returns the Subject Distance Description. 
            </summary>
            <returns>the Subject Distance Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetCompressionLevelDescription">
            <summary>
            Returns the Compression Level Description. 
            </summary>
            <returns>the Compression Level Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetThumbnailLengthDescription">
            <summary>
            Returns the Thumbnail Length Description. 
            </summary>
            <returns>the Thumbnail Length Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetThumbnailOffSetDescription">
            <summary>
            Returns the Thumbnail OffSet Description. 
            </summary>
            <returns>the Thumbnail OffSet Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetYResolutionDescription">
            <summary>
            Returns the Y Resolution Description. 
            </summary>
            <returns>the Y Resolution Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetXResolutionDescription">
            <summary>
            Returns the X Resolution Description. 
            </summary>
            <returns>the X Resolution Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetExposureTimeDescription">
            <summary>
            Returns the Exposure Time Description. 
            </summary>
            <returns>the Exposure Time Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetShutterSpeedDescription">
            <summary>
            Returns the Shutter Speed Description. 
            </summary>
            <returns>the Shutter Speed Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetFNumberDescription">
            <summary>
            Returns the F Number Description. 
            </summary>
            <returns>the F Number Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetYCbCrPositioningDescription">
            <summary>
            Returns the YCbCr Positioning Description. 
            </summary>
            <returns>the YCbCr Positioning Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetOrientationDescription">
            <summary>
            Returns the Orientation Description. 
            </summary>
            <returns>the Orientation Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetResolutionDescription">
            <summary>
            Returns the Resolution Description. 
            </summary>
            <returns>the Resolution Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetSensingMethodDescription">
            <summary>
            Returns the Sensing Method Description. 
            </summary>
            <returns>the Sensing Method Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetXPAuthorDescription">
            <summary>
            Returns the XP author description. 
            </summary>
            <returns>the XP author description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetXPCommentsDescription">
            <summary>
            Returns the XP comments description. 
            </summary>
            <returns>the XP comments description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetXPKeywordsDescription">
            <summary>
            Returns the XP keywords description. 
            </summary>
            <returns>the XP keywords description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetXPSubjectDescription">
            <summary>
            Returns the XP subject description. 
            </summary>
            <returns>the XP subject description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetXPTitleDescription">
            <summary>
            Returns the XP title description. 
            </summary>
            <returns>the XP title description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.GetComponentConfigurationDescription">
            <summary>
            Returns the Component Configuration Description. 
            </summary>
            <returns>the Component Configuration Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDescriptor.ConvertBytesToVersionString(System.Int32[])">
            <summary>
            Takes a series of 4 bytes from the specified offSet, and converts these to a 
            well-known version number, where possible.  For example, (hex) 30 32 31 30 == 2.10).
            </summary>
            <param name="someComponents">the four version values</param>
            <returns>the version as a string of form 2.10</returns>
        </member>
        <member name="T:com.drew.metadata.exif.ExifDirectory">
            <summary>
            The Exif Directory class
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_APERTURE">
            <summary>
            The actual aperture value of lens when the image was taken. Unit is APEX. 
            To convert this value to ordinary F-number (F-stop), calculate this value'str power 
            of root 2 (=1.4142). For example, if the ApertureValue is '5', F-number is 1.4142^5 = F5.6.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_BITS_PER_SAMPLE">
            <summary>
            When image format is no compression, this value shows the number of bits 
            per component for each pixel. Usually this value is '8,8,8'.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.ExifDirectory.TAG_COMPRESSION" -->
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_PHOTOMETRIC_INTERPRETATION">
            <summary>
            Shows the color space of the image data components.
            0 = WhiteIsZero
            1 = BlackIsZero
            2 = RGB
            3 = RGB Palette
            4 = Transparency Mask
            5 = CMYK
            6 = YCbCr
            8 = CIELab
            9 = ICCLab
            10 = ITULab
            32803 = Color Filter Array
            32844 = Pixar LogL
            32845 = Pixar LogLuv
            34892 = Linear Raw
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_THRESHOLDING">
            <summary>
            1 = No dithering or halftoning
            2 = Ordered dither or halftone
            3 = Randomized dither
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_STRIP_OFFSETS">
            <summary>
            The position in the file of raster data.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_SAMPLES_PER_PIXEL">
            <summary>
            Each pixel is composed of this many samples.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_ROWS_PER_STRIP">
            <summary>
            The raster is codified by a single block of data holding this many rows.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_STRIP_BYTE_COUNTS">
            <summary>
            The size of the raster data in bytes.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_PLANAR_CONFIGURATION">
            <summary>
            When image format is no compression YCbCr, this value shows byte aligns of YCbCr data. 
            If value is '1', Y/Cb/Cr value is chunky format, contiguous for each subsampling pixel. 
            If value is '2', Y/Cb/Cr value is separated and stored to Y plane/Cb plane/Cr plane format.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_NEW_SUBFILE_TYPE">
            <summary>
            The new subfile type tag.
            0 = Full-resolution Image
            1 = Reduced-resolution image
            2 = Single page of multi-page image
            3 = Single page of multi-page reduced-resolution image
            4 = Transparency mask
            5 = Transparency mask of reduced-resolution image
            6 = Transparency mask of multi-page image
            7 = Transparency mask of reduced-resolution multi-page image
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_SUBFILE_TYPE">
            <summary>
            The old subfile type tag.
            1 = Full-resolution image (Main image)
            2 = Reduced-resolution image (Thumbnail)
            3 = Single page of multi-page image
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_CFA_PATTERN_2">
            <summary>
            There are two definitions for CFA pattern, I don't know the difference...
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_EXPOSURE_INDEX_2">
            <summary>
            There are two definitions for exposure index, I don't know the difference...
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_EXPOSURE_TIME">
            <summary>
            Exposure time (reciprocal of shutter speed). Unit is second. 
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_FNUMBER">
            <summary>
            The actual F-number(F-stop) of lens when the image was taken.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_EXPOSURE_PROGRAM">
            <summary>
            Exposure program that the camera used when image was taken. 
            '1' means manual control, '2' program normal, '3' aperture priority, '4' 
            shutter priority, '5' program creative (slow program), 
            '6' program action (high-speed program), '7' portrait mode, '8' landscape mode. 
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_COMPRESSION_LEVEL">
            <summary>
            Average (rough estimate) compression level in JPEG bits per pixel. 
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_SHUTTER_SPEED">
            <summary>
            Shutter speed by APEX value. To convert this value to ordinary 'Shutter Speed'; 
            calculate this value'str power of 2, then reciprocal. For example, if the 
            ShutterSpeedValue is '4', shutter speed is 1/(24)=1/16 second.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_MAX_APERTURE">
            <summary>
            Maximum aperture value of lens. You can convert to F-number by calculating
            power of root 2 (same process of ApertureValue:0x9202).
            The actual aperture value of lens when the image was taken. To convert this
            value to ordinary f-number(f-stop), calculate the value'lcStr power of root 2
            (=1.4142). For example, if the ApertureValue is '5', f-number is 1.41425^5 = F5.6.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_SUBJECT_DISTANCE">
            <summary>
            Indicates the distance the autofocus camera is focused to.  Tends to be less accurate as distance increases.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_METERING_MODE">
            <summary>
            Exposure metering method. '0' means unknown, '1' average, '2' center 
            weighted average, '3' spot, '4' multi-spot, '5' multi-segment, '6' partial, '255' other.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_LIGHT_SOURCE">
            <summary>
            White balance (aka light source). '0' means unknown, '1' daylight, 
            '2' fluorescent, '3' tungsten, '10' flash, '17' standard light A, 
            '18' standard light B, '19' standard light C, '20' D55, '21' D65, 
            '22' D75, '255' other.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_WHITE_BALANCE_MODE">
            <summary>
            This tag indicates the white balance mode set when the image was shot.
            Tag = 41987 (A403.H)
            Type = SHORT
            Count = 1
            Default = none
             0 = Auto white balance
             1 = Manual white balance
             Other = reserved
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_FLASH">
            <summary>
            0x0  = 0000000 = No Flash
            0x1  = 0000001 = Fired
            0x5  = 0000101 = Fired, Return not detected
            0x7  = 0000111 = Fired, Return detected
            0x9  = 0001001 = On
             0xd  = 0001101 = On, Return not detected
             0xf  = 0001111 = On, Return detected
             0x10 = 0010000 = Off
             0x18 = 0011000 = Auto, Did not fire
             0x19 = 0011001 = Auto, Fired
             0x1d = 0011101 = Auto, Fired, Return not detected
             0x1f = 0011111 = Auto, Fired, Return detected
             0x20 = 0100000 = No flash function
             0x41 = 1000001 = Fired, Red-eye reduction
             0x45 = 1000101 = Fired, Red-eye reduction, Return not detected
             0x47 = 1000111 = Fired, Red-eye reduction, Return detected
             0x49 = 1001001 = On, Red-eye reduction
             0x4d = 1001101 = On, Red-eye reduction, Return not detected
             0x4f = 1001111 = On, Red-eye reduction, Return detected
             0x59 = 1011001 = Auto, Fired, Red-eye reduction
             0x5d = 1011101 = Auto, Fired, Red-eye reduction, Return not detected
             0x5f = 1011111 = Auto, Fired, Red-eye reduction, Return detected
                    6543210 (positions)
            
             This is a bitmask.
             0 = flash fired
             1 = return detected
            2 = return able to be detected
            3 = unknown
            4 = auto used
            5 = unknown
            6 = red eye reduction used
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_FOCAL_LENGTH">
            <summary>
            Focal length of lens used to take image. Unit is millimeter.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_COLOR_SPACE">
            <summary>
            Defines Color Space. DCF image must use sRGB color space so value is always '1'. 
            If the picture uses the other color space, value is '65535':Uncalibrated.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_FOCAL_PLANE_UNIT">
            <summary>
            Unit of FocalPlaneXResoluton/FocalPlaneYResolution. 
            '1' means no-unit, '2' inch, '3' centimeter.
            
            Note: Some of Fujifilm'str digicam(e.g.FX2700,FX2900,Finepix4700Z/40i etc) 
            uses value '3' so it must be 'centimeter', but it seems that they use a '8.3mm?'
            (1/3in.?) to their ResolutionUnit. Fuji'str BUG? Finepix4900Z has been changed to 
            use value '2' but it doesn't match to actual value also.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_CUSTOM_RENDERED">
             <summary>
            This tag indicates the use of special processing on image data, such as rendering
            geared to output. When special processing is performed, the reader is expected to
            disable or minimize any further processing.
            Tag = 41985 (A401.H)
            Type = SHORT
            Count = 1
            Default = 0
             0 = Normal process
             1 = Custom process
             Other = reserved
             </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_EXPOSURE_MODE">
            <summary>
            This tag indicates the exposure mode set when the image was shot. In auto-bracketing
            mode, the camera shoots a series of frames of the same scene at different exposure settings.
            Tag = 41986 (A402.H)
            Type = SHORT
            Count = 1
            Default = none
              0 = Auto exposure
              1 = Manual exposure
              2 = Auto bracket
              Other = reserved
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_DIGITAL_ZOOM_RATIO">
            <summary>
             This tag indicates the digital zoom ratio when the image was shot. If the
             numerator of the recorded value is 0, this indicates that digital zoom was
             not used.
             Tag = 41988 (A404.H)
             Type = RATIONAL
             Count = 1
             Default = none
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_SCENE_CAPTURE_TYPE">
            <summary>
            This tag indicates the type of scene that was shot. It can also be used to
            record the mode in which the image was shot. Note that this differs from
            the scene type (SceneType) tag.
            Tag = 41990 (A406.H)
            Type = SHORT
            Count = 1
            Default = 0
              0 = Standard
              1 = Landscape
              2 = Portrait
              3 = Night scene
              Other = reserved
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_GAIN_CONTROL">
            <summary>
            This tag indicates the degree of overall image gain adjustment.
            Tag = 41991 (A407.H)
            Type = SHORT
            Count = 1
            Default = none
              0 = None
              1 = Low gain up
              2 = High gain up
              3 = Low gain down
              4 = High gain down
              Other = reserved
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_CONTRAST">
            <summary>
            This tag indicates the direction of contrast processing applied by the camera
            when the image was shot.
            Tag = 41992 (A408.H)
            Type = SHORT
            Count = 1
            Default = 0
              0 = Normal
            1 = Soft
              2 = Hard
              Other = reserved
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_SATURATION">
            <summary>
            This tag indicates the direction of saturation processing applied by the camera
            when the image was shot.
            Tag = 41993 (A409.H)
            Type = SHORT
            Count = 1
            Default = 0
              0 = Normal
            1 = Low saturation
              2 = High saturation
              Other = reserved
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_SHARPNESS">
            <summary>
            This tag indicates the direction of sharpness processing applied by the camera
            when the image was shot.
            Tag = 41994 (A40A.H)
            Type = SHORT
            Count = 1
            Default = 0
              0 = Normal
              1 = Soft
              2 = Hard
              Other = reserved
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_DEVICE_SETTING_DESCRIPTION">
             <summary>
            This tag indicates information on the picture-taking conditions of a particular
             camera model. The tag is used only to indicate the picture-taking conditions in
             the reader.
             Tag = 41995 (A40B.H)
             Type = UNDEFINED
             Count = Any
             Default = none
            
             The information is recorded in the format shown below. The data is recorded
             in Unicode using SHORT type for the number of display rows and columns and
             UNDEFINED type for the camera settings. The Unicode (UCS-2) string including
             Signature is NULL terminated. The specifics of the Unicode string are as given
             in ISO/IEC 10464-1.
            
                  Length  Type        Meaning
                  ------+-----------+------------------
                  2       SHORT       Display columns
                  2       SHORT       Display rows
                  Any     UNDEFINED   Camera setting-1
                  Any     UNDEFINED   Camera setting-2
                  :       :           :
                  Any     UNDEFINED   Camera setting-n
             </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_SUBJECT_DISTANCE_RANGE">
             <summary>
             This tag indicates the distance to the subject.
            Tag = 41996 (A40C.H)
             Type = SHORT
             Count = 1
             Default = none
               0 = unknown
               1 = Macro
               2 = Close view
               3 = Distant view
               Other = reserved
             </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_FOCAL_LENGTH_IN_35MM_FILM">
            <summary>
            This tag indicates the equivalent focal length assuming a 35mm film camera,
            in mm. A value of 0 means the focal length is unknown. Note that this tag
            differs from the FocalLength tag.
            Tag = 41989 (A405.H)
            Type = SHORT
            Count = 1
            Default = none
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifDirectory.TAG_IMAGE_UNIQUE_ID">
            <summary>
            This tag indicates an identifier assigned uniquely to each image. It is
            recorded as an ASCII string equivalent to hexadecimal notation and 128-bit
            fixed length.
            Tag = 42016 (A420.H)
            Type = ASCII
            Count = 33
            Default = none
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDirectory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDirectory.GetThumbnailData">
            <summary>
            Gets the thumbnail data.
            </summary>
            <returns>the thumbnail data or null if none</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDirectory.WriteThumbnail(System.String)">
            <summary>
            Writes the thumbnail in the given aFile
            </summary>
            <param name="filename">where to write the thumbnail</param>
            <exception cref="T:com.drew.metadata.MetadataException">if there is not data in thumbnail</exception>
        </member>
        <member name="M:com.drew.metadata.exif.ExifDirectory.ContainsThumbnail">
            <summary>
            Indicates if there is thumbnail data or not
            </summary>
            <returns>true if there is thumbnail data, false if not</returns>
        </member>
        <member name="T:com.drew.metadata.exif.ExifInteropDescriptor">
            <summary>
            Tag descriptor for almost every images
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.ExifInteropDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.ExifInteropDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifInteropDescriptor.GetInteropVersionDescription">
            <summary>
            Returns the Interop Version Description. 
            </summary>
            <returns>the Interop Version Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifInteropDescriptor.GetInteropIndexDescription">
            <summary>
            Returns the Interop index Description. 
            </summary>
            <returns>the Interop index Description.</returns>
        </member>
        <member name="T:com.drew.metadata.exif.ExifInteropDirectory">
            <summary>
            This class represents EXIF INTEROP marker note.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.ExifInteropDirectory.InitTagMap">
            <summary>
            Initialize the tag map.
            </summary>
            <returns>the tag map</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifInteropDirectory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.ExifInteropDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifInteropDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.exif.ExifProcessingException">
            <summary>
            The exception type raised during reading of Exif data in the instance of unexpected data conditions.
            </summary>
        </member>
        <member name="T:com.drew.metadata.MetadataException">
            <summary>
            This class represents a Metadata exception
            </summary>
        </member>
        <member name="M:com.drew.metadata.MetadataException.#ctor(System.String)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aMessage">The error aMessage</param>
        </member>
        <member name="M:com.drew.metadata.MetadataException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aMessage">The error aMessage</param>
            <param name="aCause">The aCause of the exception</param>
        </member>
        <member name="M:com.drew.metadata.MetadataException.#ctor(System.Exception)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aCause">The aCause of the exception</param>
        </member>
        <member name="M:com.drew.metadata.exif.ExifProcessingException.#ctor(System.String)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aMessage">The error aMessage</param>
        </member>
        <member name="M:com.drew.metadata.exif.ExifProcessingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aMessage">The error aMessage</param>
            <param name="aCause">The aCause of the exception</param>
        </member>
        <member name="M:com.drew.metadata.exif.ExifProcessingException.#ctor(System.Exception)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aCause">The aCause of the exception</param>
        </member>
        <member name="T:com.drew.metadata.exif.ExifReader">
            <summary>
            Extracts Exif data from a JPEG lcHeader segment, providing information about 
            the camera/scanner/capture device (if available).  
            Information is encapsulated in an Metadata object.
            </summary>
        </member>
        <member name="T:com.drew.metadata.IMetadataReader">
            <summary>
            This interface represents a Metadata reader object
            </summary>
        </member>
        <member name="M:com.drew.metadata.IMetadataReader.Extract">
            <summary>
            Extracts aMetadata
            </summary>
            <returns>the aMetadata found</returns>
        </member>
        <member name="M:com.drew.metadata.IMetadataReader.Extract(com.drew.metadata.Metadata)">
            <summary>
            Extracts aMetadata
            </summary>
            <param name="aMetadata">where to add aMetadata</param>
            <returns>the aMetadata found</returns>
        </member>
        <member name="F:com.drew.metadata.exif.ExifReader._data">
            <summary>
            The JPEG segment as an array of bytes.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifReader._isMotorollaByteOrder">
            <summary>
            Represents the native byte ordering used in the JPEG segment.
            If true, then we're using Motorolla ordering (Big endian), else 
            we're using Intel ordering (Little endian).
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifReader._metadata">
            <summary>
            Bean instance to store information about the image and camera/scanner/capture device.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifReader.BYTES_PER_FORMAT">
            <summary>
            The number of bytes used per format descriptor.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.ExifReader.MAX_FORMAT_CODE">
            <summary>
            The number of formats known.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.#ctor(System.IO.FileInfo)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aFile">the aFile to read</param>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.#ctor(System.Byte[])">
            <summary>
            Constructor of the object
            </summary>
            <param name="data">the data</param>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.Extract">
            <summary>
            Performs the Exif data extraction, returning a new instance of Metadata. 
            </summary>
            <returns>a new instance of Metadata</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.Extract(com.drew.metadata.Metadata)">
            <summary>
            Performs the Exif data extraction, adding found values to the specified instance of Metadata.
            </summary>
            <param name="aMetadata">where to add meta data</param>
            <returns>the aMetadata</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.StoreThumbnailBytes(com.drew.metadata.exif.ExifDirectory,System.Int32)">
            <summary>
            Will stock the thumbnail into exif directory if available.
            </summary>
            <param name="exifDirectory">where to stock the thumbnail</param>
            <param name="tiffHeaderOffset">the tiff lcHeader lcOffset value</param>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.SetByteOrder(System.String)">
            <summary>
            Sets Motorolla byte order
            </summary>
            <param name="byteOrderIdentifier">the Motorolla byte order identifier (MM=true, II=false) </param>
            <returns></returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.IsDirectoryLengthValid(System.Int32,System.Int32)">
            <summary>
            Indicates if Directory Length is valid or not
            </summary>
            <param name="dirStartOffSet">where to start</param>
            <param name="tiffHeaderOffset">The tiff lcHeader lcOffset</param>
            <returns>true if Directory Length is valid</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.CalculateTagOffset(System.Int32,System.Int32)">
            <summary>
            Determine the lcOffset at which a given InteropArray entry begins within the specified IFD. 
            </summary>
            <param name="dirStartOffset">the lcOffset at which the IFD starts</param>
            <param name="entryNumber">the zero-based entry number</param>
            <returns>the lcOffset at which a given InteropArray entry begins within the specified IFD</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.CalculateTagValueOffset(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates tag value lcOffset
            </summary>
            <param name="byteCount">the byte count</param>
            <param name="dirEntryOffset">the dir entry lcOffset</param>
            <param name="tiffHeaderOffset">the tiff lcHeader ofset</param>
            <returns>-1 if error, or the valus lcOffset</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.ProcessDirectory(com.drew.metadata.AbstractDirectory,System.Collections.Generic.Dictionary{System.Int32,System.String},System.Int32,System.Int32)">
            <summary>
            Process one of the nested Tiff IFD directories.
            2 bytes: number of tags for each tag
            	2 bytes: tag type	
            	2 bytes: format code	
            	4 bytes: component count
            </summary>
            <param name="directory">the directory</param>
            <param name="dirStartOffSet">where to start</param>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.ProcessMakerNote(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.String},System.Int32)">
            <summary>
            Determine the camera model and makernote format
            </summary>
            <param name="subdirOffset">the sub lcOffset dir</param>
            <param name="processedDirectoryOffsets">the processed directory offsets</param>
            <param name="tiffHeaderOffset">the tiff lcHeader lcOffset</param>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.ProcessTag(com.drew.metadata.AbstractDirectory,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Processes tag
            </summary>
            <param name="directory">the directory</param>
            <param name="aTagType">the tag type</param>
            <param name="tagValueOffset">the lcOffset value</param>
            <param name="componentCount">the component count</param>
            <param name="formatCode">the format code</param>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.ReadString(System.Int32,System.Int32)">
            <summary>
            Creates a string from the _data buffer starting at the specified offSet, 
            and ending where byte=='\0' or where Length==maxLength.
            </summary>
            <param name="offSet">the lcOffset</param>
            <param name="maxLength">the max length</param>
            <returns>a string representing what was read</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.ReadCommentString(System.Int32,System.Int32,System.Int32)">
            <summary>
            A special case of ReadString that handle Exif UserComment reading.
            This method is necessary as certain camere models prefix the comment string 
            with "ASCII\0", which is all that would be returned by ReadString(...).
            </summary>
            <param name="tagValueOffSet">the tag value lcOffset</param>
            <param name="componentCount">the component count</param>
            <param name="formatCode">the format code</param>
            <returns>a string</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.CalculateDirectoryEntryOffSet(System.Int32,System.Int32)">
            <summary>
            Determine the offSet at which a given InteropArray entry begins within the specified IFD.
            </summary>
            <param name="ifdStartOffSet">the offSet at which the IFD starts</param>
            <param name="entryNumber">the zero-based entry number</param>
            <returns>the directory entry lcOffset</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.Get16Bits(System.Int32)">
            <summary>
            Gets a 16 bit aValue from aFile'str native byte order.  Between 0x0000 and 0xFFFF.
            </summary>
            <param name="offSet">the lcOffset</param>
            <returns>a 16 bit int</returns>
        </member>
        <member name="M:com.drew.metadata.exif.ExifReader.Get32Bits(System.Int32)">
            <summary>
            Gets a 32 bit aValue from aFile'str native byte order.
            </summary>
            <param name="offSet">the lcOffset</param>
            <returns>a 32b int</returns>
        </member>
        <member name="T:com.drew.metadata.exif.FujifilmDescriptor">
            <summary>
            Fujifilm'str digicam added the MakerNote tag from the Year2000'str model 
            (e.g.Finepix1400, Finepix4700). It uses IFD format and start from ASCII character 
            'FUJIFILM', and next 4 bytes(aValue 0x000c) points the offSet to first IFD entry. 
            Example of actual data structure is shown below.
            :0000: 46 55 4A 49 46 49 4C 4D-0C 00 00 00 0F 00 00 00 :0000: FUJIFILM........
            :0010: 07 00 04 00 00 00 30 31-33 30 00 10 02 00 08 00 :0010: ......0130......
            There are two big differences to the other manufacturers.
            - Fujifilm'str Exif data uses Motorola align, but MakerNote ignores it and uses Intel align.
            - The other manufacturer'str MakerNote counts the "offSet to data" from the first byte of 
              TIFF lcHeader (same as the other IFD), but Fujifilm counts it from the first byte of MakerNote itself.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetAutoExposureWarningDescription">
            <summary>
            Returns the Auto Exposure Description. 
            </summary>
            <returns>the Auto Exposure Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetFocusWarningDescription">
            <summary>
            Returns the Focus Warning Description. 
            </summary>
            <returns>the Focus Warning Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetBlurWarningDescription">
            <summary>
            Returns the Blur Warning Description. 
            </summary>
            <returns>the Blur Warning Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetContinuousTakingOrAutoBrackettingDescription">
            <summary>
            Returns the Continuous Taking Or AutoBracketting Description. 
            </summary>
            <returns>the Continuous Taking Or AutoBracketting Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetPictureModeDescription">
            <summary>
            Returns the Picture Mode Description. 
            </summary>
            <returns>the Picture Mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetSlowSyncDescription">
            <summary>
            Returns the Slow Sync Description. 
            </summary>
            <returns>the Slow Sync Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetFocusModeDescription">
            <summary>
            Returns the Focus Mode Description. 
            </summary>
            <returns>the Focus Mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetMacroDescription">
            <summary>
            Returns the Macro Description. 
            </summary>
            <returns>the Macro Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetFlashStrengthDescription">
            <summary>
            Returns the Flash Strength Description. 
            </summary>
            <returns>the Flash Strength Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetFlashModeDescription">
            <summary>
            Returns the Flash Mode Description. 
            </summary>
            <returns>the Flash Mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetToneDescription">
            <summary>
            Returns the Tone Description. 
            </summary>
            <returns>the Tone Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetColorDescription">
            <summary>
            Returns the Color Description. 
            </summary>
            <returns>the Color Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetWhiteBalanceDescription">
            <summary>
            Returns the White Balance Description. 
            </summary>
            <returns>the White Balance Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDescriptor.GetSharpnessDescription">
            <summary>
            Returns the Sharpness Description. 
            </summary>
            <returns>the Sharpness Description.</returns>
        </member>
        <member name="T:com.drew.metadata.exif.FujifilmDirectory">
            <summary>
            The Fuji Film Makernote Directory
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDirectory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.exif.FujifilmDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.exif.GpsDescriptor">
            <summary>
            Tag descriptor for GPS
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDescriptor.GetGpsLatitudeDescription">
            <summary>
            Returns the Gps Latitude Description. 
            </summary>
            <returns>the Gps Latitude Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDescriptor.GetGpsLongitudeDescription">
            <summary>
            Returns the Gps Longitude Description. 
            </summary>
            <returns>the Gps Longitude Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDescriptor.GetHoursMinutesSecondsDescription(System.Int32)">
            <summary>
            Returns the Hours Minutes Seconds Description. 
            </summary>
            <param name="aTagType">the tag type</param>
            <returns>the Hours Minutes Seconds Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDescriptor.GetGpsTimeStampDescription">
            <summary>
            Returns the Gps Time Stamp Description. 
            </summary>
            <returns>the Gps Time Stamp Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDescriptor.GetGpsDestinationReferenceDescription">
            <summary>
            Returns the Gps Destination Reference Description. 
            </summary>
            <returns>the Gps Destination Reference Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDescriptor.GetGpsDirectionDescription(System.Int32)">
            <summary>
            Returns the Gps Direction Description. 
            </summary>
            <returns>the Gps Direction Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDescriptor.GetGpsDirectionReferenceDescription(System.Int32)">
            <summary>
            Returns the Gps Direction Reference Description. 
            </summary>
            <returns>the Gps Direction Reference Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDescriptor.GetGpsSpeedRefDescription">
            <summary>
            Returns the Gps Speed Ref Description. 
            </summary>
            <returns>the Gps Speed Ref Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDescriptor.GetGpsMeasureModeDescription">
            <summary>
            Returns the Gps Measure Mode Description. 
            </summary>
            <returns>the Gps Measure Mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDescriptor.GetGpsStatusDescription">
            <summary>
            Returns the Gps Status Description. 
            </summary>
            <returns>the Gps Status Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDescriptor.GetGpsAltitudeRefDescription">
            <summary>
            Returns the Gps Altitude Ref Description. 
            </summary>
            <returns>the Gps Altitude Ref Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDescriptor.GetGpsAltitudeDescription">
            <summary>
            Returns the Gps Altitude Description. 
            </summary>
            <returns>the Gps Altitude Description.</returns>
        </member>
        <member name="T:com.drew.metadata.exif.GpsDirectory">
            <summary>
            The GPS Directory class
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_VERSION_ID">
            <summary>
            GPS tag version GPSVersionID 0 0 BYTE 4
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_LATITUDE_REF">
            <summary>
            North or South Latitude GPSLatitudeRef 1 1 ASCII 2
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_LATITUDE">
            <summary>
            Latitude GPSLatitude 2 2 RATIONAL 3
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_LONGITUDE_REF">
            <summary>
            East or West Longitude GPSLongitudeRef 3 3 ASCII 2
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_LONGITUDE">
            <summary>
            Longitude GPSLongitude 4 4 RATIONAL 3
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_ALTITUDE_REF">
            <summary>
            Altitude reference GPSAltitudeRef 5 5 BYTE 1
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_ALTITUDE">
            <summary>
            Altitude GPSAltitude 6 6 RATIONAL 1
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_TIME_STAMP">
            <summary>
            GPS time (atomic clock) GPSTimeStamp 7 7 RATIONAL 3
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_SATELLITES">
            <summary>
            GPS satellites used for measurement GPSSatellites 8 8 ASCII Any
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_STATUS">
            <summary>
            GPS receiver status GPSStatus 9 9 ASCII 2
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_MEASURE_MODE">
            <summary>
            GPS measurement mode GPSMeasureMode 10 A ASCII 2
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_DOP">
            <summary>
            Measurement precision GPSDOP 11 B RATIONAL 1
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_SPEED_REF">
            <summary>
            Speed unit GPSSpeedRef 12 C ASCII 2
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_SPEED">
            <summary>
            Speed of GPS receiver GPSSpeed 13 D RATIONAL 1
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_TRACK_REF">
            <summary>
            Reference for direction of movement GPSTrackRef 14 E ASCII 2
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_TRACK">
            <summary>
            Direction of movement GPSTrack 15 F RATIONAL 1
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_IMG_DIRECTION_REF">
            <summary>
            Reference for direction of image GPSImgDirectionRef 16 10 ASCII 2
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_IMG_DIRECTION">
            <summary>
            Direction of image GPSImgDirection 17 11 RATIONAL 1
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_MAP_DATUM">
            <summary>
            Geodetic survey data used GPSMapDatum 18 12 ASCII Any
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_DEST_LATITUDE_REF">
            <summary>
            Reference for latitude of destination GPSDestLatitudeRef 19 13 ASCII 2
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_DEST_LATITUDE">
            <summary>
            Latitude of destination GPSDestLatitude 20 14 RATIONAL 3
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_DEST_LONGITUDE_REF">
            <summary>
            Reference for longitude of destination GPSDestLongitudeRef 21 15 ASCII 2
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_DEST_LONGITUDE">
            <summary>
            Longitude of destination GPSDestLongitude 22 16 RATIONAL 3
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_DEST_BEARING_REF">
            <summary>
            Reference for bearing of destination GPSDestBearingRef 23 17 ASCII 2
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_DEST_BEARING">
            <summary>
            Bearing of destination GPSDestBearing 24 18 RATIONAL 1
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_DEST_DISTANCE_REF">
            <summary>
            Reference for distance to destination GPSDestDistanceRef 25 19 ASCII 2
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.GpsDirectory.TAG_GPS_DEST_DISTANCE">
            <summary>
            Distance to destination GPSDestDistance 26 1A RATIONAL 1
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDirectory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.exif.GpsDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.exif.NikonType1Descriptor">
            <summary>
            There are 3 formats of Nikon'str MakerNote. MakerNote of E700/E800/E900/E900S/E910/E950 starts 
            from ASCII string "Nikon". Data format is the same as IFD, but it starts from offSet 0x08. 
            This is the same as Olympus except start string. Example of actual data structure is shown below.
            :0000: 4E 69 6B 6F 6E 00 01 00-05 00 02 00 02 00 06 00 Nikon...........
            :0010: 00 00 EC 02 00 00 03 00-03 00 01 00 00 00 06 00 ................
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType1Descriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType1Descriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType1Descriptor.GetConverterDescription">
            <summary>
            Returns the Converter Description. 
            </summary>
            <returns>the Converter Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType1Descriptor.GetDigitalZoomDescription">
            <summary>
            Returns the Digital Zoom Description. 
            </summary>
            <returns>the Digital Zoom Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType1Descriptor.GetFocusDescription">
            <summary>
            Returns the Focus Description. 
            </summary>
            <returns>the Focus Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType1Descriptor.GetWhiteBalanceDescription">
            <summary>
            Returns the White Balance Description. 
            </summary>
            <returns>the White Balance Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType1Descriptor.GetCcdSensitivityDescription">
            <summary>
            Returns the Ccd Sensitivity Description. 
            </summary>
            <returns>the Ccd Sensitivity Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType1Descriptor.GetImageAdjustmentDescription">
            <summary>
            Returns the Image Adjustment Description. 
            </summary>
            <returns>the Image Adjustment Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType1Descriptor.GetColorModeDescription">
            <summary>
            Returns the Color Mode Description. 
            </summary>
            <returns>the Color Mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType1Descriptor.GetQualityDescription">
            <summary>
            Returns the Quality Description. 
            </summary>
            <returns>the Quality Description.</returns>
        </member>
        <member name="T:com.drew.metadata.exif.AbstractNikonTypeDirectory">
            <summary>
            Class for all Nikon directory.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.AbstractNikonTypeDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType1Directory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType1Directory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.exif.NikonType2Descriptor">
            <summary>
            Tag descriptor for Nikon
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType2Descriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType2Descriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType2Descriptor.GetAutoFocusPositionDescription">
            <summary>
            Returns auto focus position Description. 
            </summary>
            <returns>the auto focus position Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType2Descriptor.GetDigitalZoomDescription">
            <summary>
            Returns digital zoom Description. 
            </summary>
            <returns>the digital zoom Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType2Descriptor.GetIsoSettingDescription">
            <summary>
            Returns iso setting Description. 
            </summary>
            <returns>the iso setting Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType2Descriptor.GetAutoFlashCompensation">
            <summary>
            Returns auto flash compensation Description. 
            </summary>
            <returns>the auto flash compensation Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType2Descriptor.GetAutoFlashCompensationDescription">
            <summary>
            Returns auto falsh compensation Description. 
            </summary>
            <returns>the auto falsh compensation Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType2Descriptor.GetLensDescription">
            <summary>
            Returns lens Description. 
            </summary>
            <returns>the lens Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType2Descriptor.GetHueAdjustmentDescription">
            <summary>
            Returns hue adjustement Description. 
            </summary>
            <returns>the hue adjustement Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType2Descriptor.GetColorModeDescription">
            <summary>
            Returns color mode Description. 
            </summary>
            <returns>the color mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType2Descriptor.GetAutoFirmwareVersionDescription">
            <summary>
            Returns auto firmware version Description. 
            </summary>
            <returns>the auto firmware version Description.</returns>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_FIRMWARE_VERSION">
            <summary>
            Values observed
            - 0200 (D70)
            - 0200 (D1X)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_ISO_1">
            <summary>
            Values observed
            - 0 250
            - 0 400
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_COLOR_MODE">
            <summary>
            Values observed
            - COLOR (seen in the D1X)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_QUALITY_AND_FILE_FORMAT">
            <summary>
            Values observed
            - FILE
            - RAW
            - NORMAL
            - FINE
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_CAMERA_WHITE_BALANCE">
             <summary>
             The white balance as set in the camera.
            
             Values observed
             - AUTO
             - SUNNY (D70)
             - FLASH (D1X)
             (presumably also SHADOW / INCANDESCENT / FLUORESCENT / CLOUDY)
             </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_CAMERA_SHARPENING">
             <summary>
             The sharpening as set in the camera.
            
             Values observed
             - AUTO
             - NORMAL (D70)
             - NONE (D1X)
             </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_AF_TYPE">
             <summary>
             The auto-focus type used by the camera.
            
             Values observed
             - AF-S
             - AF-C
             - MANUAL
             </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_FLASH_SYNC_MODE">
             <summary>
             Values observed
             - NORMAL
             - RED-EYE
            
             Note: when TAG_NIKON_TYPE2_AUTO_FLASH_MODE is blank, Nikon Browser displays "Flash Sync Mode: Not Attached"
             </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_AUTO_FLASH_MODE">
            <summary>
            Values observed
            - Built-in,TTL
            - Optional,TTL (with speedlight SB800, flash sync mode as NORMAL.  NikonBrowser reports Auto Flash Comp: 0 EV -- which tag is that?) (D70)
            - NEW_TTL (Nikon Browser interprets as "D-TTL")
            - (blank -- accompanied FlashSyncMode of NORMAL) (D70)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_34" -->
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_CAMERA_WHITE_BALANCE_FINE">
            <summary>
            Values observed
            - 0
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_CAMERA_WHITE_BALANCE_RB_COEFF">
             <summary>
             The first two numbers are coefficients to multiply red and blue channels according to white balance as set in the
             camera. The meaning of the third and the fourth numbers is unknown.
            
             Values observed
             - 2.25882352 1.76078431 0.0 0.0
             - 10242/1 34305/1 0/1 0/1
             - 234765625/100000000 1140625/1000000 1/1 1/1
             </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_1">
            <summary>
            Values observed
            - 0,1,6,0 (hex)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_2" -->
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_ISO_SELECTION" -->
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_DATA_DUMP" -->
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_3">
            <summary>
            Values observed
            - 914
            - 1379 (D70)
            - 2781 (D1X)
            - 6942 (D100)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_AUTO_FLASH_COMPENSATION">
            <summary>
            Values observed
            - (no value -- blank)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_ISO_2">
            <summary>
            Values observed
            - 0 250
            - 0 400
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_21">
            <summary>
            Values observed
            - 0 0 49163 53255
            - 0 0 3008 2000 (the image dimensions were 3008x2000) (D70)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_22">
            <summary>
            Values observed
            - (blank)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_23">
            <summary>
            Values observed
            - (blank)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_24">
            <summary>
            Values observed
            - 0
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_IMAGE_ADJUSTMENT" -->
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_CAMERA_TONE_COMPENSATION">
             <summary>
             The tone compensation as set in the camera.
            
             Values observed
             - AUTO
             - NORMAL (D1X, D100)
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_ADAPTER" -->
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_4">
            <summary>
            Values observed
            - 6
            - 6 (D70)
            - 2 (D1X)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_LENS">
             <summary>
             A pair of focal/max-fstop values that describe the lens used.
            
             Values observed
             - 180.0,180.0,2.8,2.8 (D100)
             - 240/10 850/10 35/10 45/10
             - 18-70mm f/3.5-4.5 (D70)
             - 17-35mm f/2.8-2.8 (D1X)
             - 70-200mm f/2.8-2.8 (D70)
            
             Nikon Browser identifies the lens as "18-70mm F/3.5-4.5 G" which
             is identical to lcMetadata extractor, except for the "G".  This must
             be coming from another tag...
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_MANUAL_FOCUS_DISTANCE" -->
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_DIGITAL_ZOOM" -->
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_5">
            <summary>
            Values observed
            - 0
            - 9
            - 3 (D1X)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_AF_FOCUS_POSITION">
            <summary>
            Values observed
            -
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_7">
            <summary>
            Values observed
            - 0
            - 1
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_20">
            <summary>
            Values observed
            - 0
            - 0
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_8" -->
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_9">
             <summary>
             Unknown.  Fabrizio believes this may be a lookup table for the user-defined curve.
            
             Values observed
             - (blank) (D1X)
             </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_CAMERA_COLOR_MODE">
             <summary>
             The color space as set in the camera.
            
             Values observed
             - MODE1
             - Mode I (sRGB) (D70)
             - MODE2 (D1X, D100)
             </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_LIGHT_SOURCE">
            <summary>
            Values observed
            - NATURAL
            - SPEEDLIGHT (D70, D1X)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_11" -->
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_CAMERA_HUE_ADJUSTMENT">
             <summary>
             The hue adjustment as set in the camera.
            
             Values observed
             - 0
             </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_NOISE_REDUCTION">
            <summary>
            Values observed
            - OFF
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_12" -->
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_13" -->
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_14">
            <summary>
            Values observed
            - 2014 662 (D1X)
            - 1517,1012 (D100)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_15">
            <summary>
            Values observed
            - 78/10 78/10
            - 78/10 78/10 (D70)
            - 59/10 59/5 (D1X)
            - 7.8,7.8 (D100)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_25">
            <summary>
            Values observed
            - NO= 00002539
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_26">
            <summary>
            Values observed
            - 1564851
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_27">
            <summary>
            Values observed
            - 0
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_EXPOSURE_SEQUENCE_NUMBER">
             <summary>
             This appears to be a sequence number to indentify the exposure.  This value seems to increment
             for constecutive exposures (observed on D70).
            
             Values observed
             - 5062
             </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_32">
            <summary>
            Values observed
            - 0100 (D70)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_33">
            <summary>
            Values observed
            - NORMAL (D70)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_29">
            <summary>
            Nikon Browser suggests this value represents Saturation...
            Values observed
            - NORMAL (D70)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_30">
            <summary>
            Values observed
            - AUTO (D70)
            - (blank) (D70)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_CAPTURE_EDITOR_DATA">
             <summary>
             Data about changes set by Nikon Capture Editor.
            
             Values observed
             </summary>
        </member>
        <member name="F:com.drew.metadata.exif.NikonType2Directory.TAG_NIKON_TYPE2_UNKNOWN_16">
            <summary>
            Values observed
            - 1473
            - 7036 (D100)
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType2Directory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.NikonType2Directory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.exif.OlympusDescriptor">
            <summary>
            Tag descriptor for Olympus
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.OlympusDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.exif.OlympusDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.OlympusDescriptor.GetDigiZoomRatioDescription">
            <summary>
            Returns the Digi Zoom Ratio Description. 
            </summary>
            <returns>the Digi Zoom Ratio Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.OlympusDescriptor.GetMacroModeDescription">
            <summary>
            Returns the Macro Mode Description. 
            </summary>
            <returns>the Macro Mode Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.OlympusDescriptor.GetJpegQualityDescription">
            <summary>
            Returns the Jpeg Quality Description. 
            </summary>
            <returns>the Jpeg Quality Description.</returns>
        </member>
        <member name="M:com.drew.metadata.exif.OlympusDescriptor.GetSpecialModeDescription">
            <summary>
            Returns the Special Mode Description. 
            </summary>
            <returns>the Special Mode Description.</returns>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_MAKERNOTE_VERSION">
            <summary>
             Used by Konica / Minolta cameras.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_CAMERA_SETTINGS_1">
            <summary>
             Used by Konica / Minolta cameras.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_CAMERA_SETTINGS_2">
            <summary>
             Alternate Camera Settings Tag. Used by Konica / Minolta cameras.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_COMPRESSED_IMAGE_SIZE">
            <summary>
             Used by Konica / Minolta cameras.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_MINOLTA_THUMBNAIL_OFFSET_1">
            <summary>
             Used by Konica / Minolta cameras.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_MINOLTA_THUMBNAIL_OFFSET_2">
            <summary>
             Alternate Thumbnail Offset. Used by Konica / Minolta cameras.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_MINOLTA_THUMBNAIL_LENGTH">
            <summary>
             Length of thumbnail in bytes. Used by Konica / Minolta cameras.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_COLOR_MODE" -->
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_IMAGE_QUALITY_1">
            <summary>
             Used by Konica / Minolta cameras.
             0 = Raw
             1 = Super Fine
             2 = Fine
             3 = Standard
             4 = Extra Fine
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_IMAGE_QUALITY_2">
            <summary>
             Not 100% sure about this tag.
            
             Used by Konica / Minolta cameras.
             0 = Raw
             1 = Super Fine
             2 = Fine
             3 = Standard
             4 = Extra Fine
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_SPECIAL_MODE">
            <summary>
             Three values:
             Value 1: 0=Normal, 2=Fast, 3=Panorama
             Value 2: Sequence Number Value 3:
             1 = Panorama Direction: Left to Right
             2 = Panorama Direction: Right to Left
             3 = Panorama Direction: Bottom to Top
             4 = Panorama Direction: Top to Bottom
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_JPEG_QUALITY">
            <summary>
             1 = Standard Quality
             2 = High Quality
             3 = Super High Quality
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_MACRO_MODE">
            <summary>
             0 = Normal (Not Macro)
             1 = Macro
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_DIGI_ZOOM_RATIO">
            <summary>
             Zoom Factor (0 or 1 = normal)
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_IMAGE_WIDTH">
            <summary>
             Used by Epson cameras
             Units = pixels
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_IMAGE_HEIGHT">
            <summary>
             Used by Epson cameras
             Units = pixels
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_ORIGINAL_MANUFACTURER_MODEL">
            <summary>
             A string. Used by Epson cameras.
            </summary>
        </member>
        <member name="F:com.drew.metadata.exif.OlympusDirectory.TAG_OLYMPUS_PRINT_IMAGE_MATCHING_INFO">
            <summary>
             See the PIM specification here:
             http://www.ozhiker.com/electronics/pjmt/jpeg_info/pim.html
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.OlympusDirectory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.exif.OlympusDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.exif.OlympusDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.iptc.IptcDescriptor">
            <summary>
            Tag descriptor for IPTC
            </summary>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcDescriptor.GetUrgencyDescription">
            <summary>
            Returns urgency Description. 
            </summary>
            <returns>the urgency Description.</returns>
        </member>
        <member name="T:com.drew.metadata.iptc.IptcDirectory">
            <summary>
            The Iptc Directory class
            </summary>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcDirectory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.iptc.IptcProcessingException">
            <summary>
            The exception type raised during reading of Iptc data in the instance of unexpected data conditions.
            </summary>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcProcessingException.#ctor(System.String)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aMessage">The error aMessage</param>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcProcessingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aMessage">The error aMessage</param>
            <param name="aCause">The aCause of the exception</param>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcProcessingException.#ctor(System.Exception)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aCause">The aCause of the exception</param>
        </member>
        <member name="T:com.drew.metadata.iptc.IptcReader">
            <summary>
            The Iptc reader class
            </summary>
        </member>
        <member name="F:com.drew.metadata.iptc.IptcReader._data">
            <summary>
            The Iptc data segment
            </summary>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcReader.#ctor(System.IO.FileInfo)">
            <summary>
            Creates a new IptcReader for the specified Jpeg jpegFile.
            </summary>
            <param name="jpegFile">where to read</param>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcReader.#ctor(System.Byte[])">
            <summary>
            Constructor of the object
            </summary>
            <param name="data">the data to read</param>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcReader.Extract">
            <summary>
            Performs the Iptc data extraction, returning a new instance of Metadata. 
            </summary>
            <returns>a new instance of Metadata</returns>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcReader.Extract(com.drew.metadata.Metadata)">
            <summary>
            Extracts aMetadata
            </summary>
            <param name="aMetadata">where to add aMetadata</param>
            <returns>the aMetadata found</returns>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcReader.Get32Bits(System.Int32)">
            <summary>
            Returns an int calculated from two bytes of data at the specified lcOffset (MSB, LSB).
            </summary>
            <param name="lcOffset">position within the data buffer to read first byte</param>
            <returns>the 32 bit int value, between 0x0000 and 0xFFFF</returns>
        </member>
        <member name="M:com.drew.metadata.iptc.IptcReader.ProcessTag(com.drew.metadata.AbstractDirectory,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method serves as marsheller of objects for dataset. 
            It converts from IPTC octets to relevant java object.
            </summary>
            <param name="directory">the directory</param>
            <param name="directoryType">the directory type</param>
            <param name="aTagType">the tag type</param>
            <param name="lcOffset">the lcOffset</param>
            <param name="tagByteCount">the tag byte count</param>
        </member>
        <member name="T:com.drew.metadata.jpeg.JpegCommentDescriptor">
            <summary>
            Tag descriptor for Jpeg
            </summary>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegCommentDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegCommentDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="T:com.drew.metadata.jpeg.JpegCommentDirectory">
            <summary>
            The JpegComment Directory class
            </summary>
        </member>
        <member name="F:com.drew.metadata.jpeg.JpegCommentDirectory.TAG_JPEG_COMMENT">
            <summary>
            This is in bits/sample, usually 8 (12 and 16 not supported by most software).
            </summary>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegCommentDirectory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegCommentDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegCommentDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="T:com.drew.metadata.jpeg.JpegCommentReader">
            <summary>
            The Jpeg reader class
            </summary>
        </member>
        <member name="F:com.drew.metadata.jpeg.JpegCommentReader._data">
            <summary>
            The COM data segment.
            </summary>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegCommentReader.#ctor(System.IO.FileInfo)">
            <summary>
            Creates a new JpegReader for the specified Jpeg jpegFile.
            </summary>
            <param name="jpegFile">where to read</param>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegCommentReader.#ctor(System.Byte[])">
            <summary>
            Creates a new JpegReader for the specified Jpeg jpegFile.
            </summary>
            <param name="data">where to read</param>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegCommentReader.Extract">
            <summary>
            Performs the Jpeg data extraction, returning a new instance of Metadata. 
            </summary>
            <returns>a new instance of Metadata</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegCommentReader.Extract(com.drew.metadata.Metadata)">
            <summary>
            Extracts aMetadata
            </summary>
            <param name="aMetadata">where to add aMetadata</param>
            <returns>the aMetadata found</returns>
        </member>
        <member name="T:com.drew.metadata.jpeg.JpegComponent">
            <summary>
            The Jpeg component class
            </summary>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegComponent.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            The constructor of the object
            </summary>
            <param name="componentId">the component id</param>
            <param name="samplingFactorByte">the sampling lcFactor byte</param>
            <param name="quantizationTableNumber">the quantization table number</param>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegComponent.GetComponentId">
            <summary>
            Gets the component id
            </summary>
            <returns>the component id</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegComponent.GetComponentName">
            <summary>
            The component name
            </summary>
            <returns>The component name</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegComponent.GetQuantizationTableNumber">
            <summary>
            Gets the Quantization Table Number
            </summary>
            <returns>the Quantization Table Number</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegComponent.GetHorizontalSamplingFactor">
            <summary>
            Gets the Horizontal Sampling Factor
            </summary>
            <returns>the Horizontal Sampling Factor</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegComponent.GetVerticalSamplingFactor">
            <summary>
            Gets the Vertical Sampling Factor
            </summary>
            <returns>the Vertical Sampling Factor</returns>
        </member>
        <member name="T:com.drew.metadata.jpeg.JpegDescriptor">
            <summary>
            Tag descriptor for Jpeg
            </summary>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegDescriptor.#ctor(com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="directory">a directory</param>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegDescriptor.GetDescription(System.Int32)">
            <summary>
            Returns a descriptive value of the the specified tag for this image. 
            Where possible, known values will be substituted here in place of the raw tokens actually 
            kept in the Exif segment. 
            If no substitution is available, the value provided by GetString(int) will be returned.
            This and GetString(int) are the only 'get' methods that won't throw an exception.
            </summary>
            <param name="aTagType">the tag to find a description for</param>
            <returns>a description of the image'str value for the specified tag, or null if the tag hasn't been defined.</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegDescriptor.GetImageWidthDescription">
            <summary>
            Gets the image width description
            </summary>
            <returns>the image width description</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegDescriptor.GetImageHeightDescription">
            <summary>
            Gets the image height description
            </summary>
            <returns>the image height description</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegDescriptor.GetDataPrecisionDescription">
            <summary>
            Gets the Data Precision description
            </summary>
            <returns>the Data Precision description</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegDescriptor.GetComponentDataDescription(System.Int32)">
            <summary>
            Gets the Component Data description
            </summary>
            <param name="componentNumber">the component number</param>
            <returns>the Component Data description</returns>
        </member>
        <member name="T:com.drew.metadata.jpeg.JpegDirectory">
            <summary>
            The Jpeg Directory class
            </summary>
        </member>
        <member name="F:com.drew.metadata.jpeg.JpegDirectory.TAG_JPEG_DATA_PRECISION">
            <summary>
            This is in bits/sample, usually 8 (12 and 16 not supported by most software).
            </summary>
        </member>
        <member name="F:com.drew.metadata.jpeg.JpegDirectory.TAG_JPEG_IMAGE_HEIGHT">
            <summary>
            The image'str height.  Necessary for decoding the image, so it should always be there.
            </summary>
        </member>
        <member name="F:com.drew.metadata.jpeg.JpegDirectory.TAG_JPEG_IMAGE_WIDTH">
            <summary>
            The image'str width.  Necessary for decoding the image, so it should always be there.
            </summary>
        </member>
        <member name="F:com.drew.metadata.jpeg.JpegDirectory.TAG_JPEG_NUMBER_OF_COMPONENTS">
            <summary>
            Usually 1 = grey scaled, 3 = color YcbCr or YIQ, 4 = color CMYK Each component TAG_COMPONENT_DATA_[1-4], 
            has the following meaning: component Id(1byte)(1 = Y, 2 = Cb, 3 = Cr, 4 = I, 5 = Q), 
            sampling factors (1byte) (bit 0-3 vertical., 4-7 horizontal.), 
            quantization table number (1 byte).
            This info is from http://www.funducode.com/freec/Fileformats/format3/format3b.htm
            </summary>
        </member>
        <member name="F:com.drew.metadata.jpeg.JpegDirectory.TAG_JPEG_COMPONENT_DATA_1">
            <summary>
            the first of a possible 4 color components.  Number of components specified in TAG_JPEG_NUMBER_OF_COMPONENTS.
            </summary>
        </member>
        <member name="F:com.drew.metadata.jpeg.JpegDirectory.TAG_JPEG_COMPONENT_DATA_2">
            <summary>
            the second of a possible 4 color components.  Number of components specified in TAG_JPEG_NUMBER_OF_COMPONENTS.
            </summary>
        </member>
        <member name="F:com.drew.metadata.jpeg.JpegDirectory.TAG_JPEG_COMPONENT_DATA_3">
            <summary>
            the third of a possible 4 color components.  Number of components specified in TAG_JPEG_NUMBER_OF_COMPONENTS.
            </summary>
        </member>
        <member name="F:com.drew.metadata.jpeg.JpegDirectory.TAG_JPEG_COMPONENT_DATA_4">
            <summary>
            the fourth of a possible 4 color components.  Number of components specified in TAG_JPEG_NUMBER_OF_COMPONENTS.
            </summary>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegDirectory.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegDirectory.GetName">
            <summary>
            Provides the name of the directory, for display purposes.  E.g. Exif 
            </summary>
            <returns>the name of the directory</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegDirectory.GetTagNameMap">
            <summary>
            Provides the map of tag names, hashed by tag type identifier. 
            </summary>
            <returns>the map of tag names</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegDirectory.GetComponent(System.Int32)">
            <summary>
            Gets the component
            </summary>
            <param name="componentNumber">The zero-based index of the component.  This number is normally between 0 and 3. Use GetNumberOfComponents for bounds-checking.</param>
            <returns>the JpegComponent</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegDirectory.GetImageWidth">
            <summary>
            Gets image width
            </summary>
            <returns>image width</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegDirectory.GetImageHeight">
            <summary>
            Gets image height
            </summary>
            <returns>image height</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegDirectory.GetNumberOfComponents">
            <summary>
            Gets the Number Of Components
            </summary>
            <returns>the Number Of Components</returns>
        </member>
        <member name="T:com.drew.metadata.jpeg.JpegReader">
            <summary>
            The JPEG reader class
            </summary>
        </member>
        <member name="F:com.drew.metadata.jpeg.JpegReader._data">
            <summary>
            The SOF0 data segment. 
            </summary>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegReader.#ctor(System.IO.FileInfo)">
            <summary>
            Creates a new IptcReader for the specified Jpeg jpegFile.
            </summary>
            <param name="jpegFile">where to read</param>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegReader.#ctor(System.Byte[])">
            <summary>
            Constructor of the object
            </summary>
            <param name="data">the data to read</param>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegReader.Extract">
            <summary>
            Performs the Exif data extraction, returning a new instance of Metadata. 
            </summary>
            <returns>a new instance of Metadata</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegReader.Extract(com.drew.metadata.Metadata)">
            <summary>
            Extracts aMetadata
            </summary>
            <param name="aMetadata">where to add aMetadata</param>
            <returns>the aMetadata found</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegReader.Get32Bits(System.Int32)">
            <summary>
            Returns an int calculated from two bytes of data at the specified lcOffset (MSB, LSB). 
            </summary>
            <param name="lcOffset">position within the data buffer to read first byte</param>
            <returns>the 32 bit int value, between 0x0000 and 0xFFFF</returns>
        </member>
        <member name="M:com.drew.metadata.jpeg.JpegReader.Get16Bits(System.Int32)">
            <summary>
            Returns an int calculated from one byte of data at the specified lcOffset.
            </summary>
            <param name="lcOffset">position within the data buffer to read byte</param>
            <returns>the 16 bit int value, between 0x00 and 0xFF</returns>
        </member>
        <member name="F:com.drew.metadata.Metadata.directoryList">
            <summary>
            List of Directory objects set against this object.  
            Keeping a list handy makes creation of an Iterator and counting tags simple. 
            </summary>
        </member>
        <member name="M:com.drew.metadata.Metadata.#ctor">
            <summary>
            Creates a new instance of Metadata. 
            </summary>
        </member>
        <member name="M:com.drew.metadata.Metadata.GetDirectoryIterator">
            <summary>
            Creates an Iterator over the tag types set against this image, preserving the 
            order in which they were set.  Should the same tag have been set more than once, 
            it'str first position is maintained, even though the final value is used. 
            </summary>
            <returns>an Iterator of tag types set for this image</returns>
        </member>
        <member name="M:com.drew.metadata.Metadata.GetDirectoryCount">
            <summary>
            Returns a count of unique directories in this aMetadata collection. 
            </summary>
            <returns>the number of unique directory types set for this aMetadata collection</returns>
        </member>
        <member name="M:com.drew.metadata.Metadata.GetDirectory(System.Type)">
            <summary>
            Gets a directory regarding its type
            </summary>
            <param name="aType">the type you are looking for</param>
            <returns>the directory found</returns>
            <exception cref="T:System.ArgumentException">if aType is not a Directory like class</exception>
        </member>
        <member name="M:com.drew.metadata.Metadata.ContainsDirectory(System.Type)">
            <summary>
            Indicates whether a given directory type has been created in this aMetadata repository.
            Directories are created by calling getDirectory(Class).
            </summary>
            <param name="aType">the Directory type</param>
            <returns>true if the aMetadata directory has been created</returns>
        </member>
        <member name="T:com.drew.metadata.Tag">
            <summary>
            This class represent a basic tag
            </summary>
        </member>
        <member name="M:com.drew.metadata.Tag.#ctor(System.Int32,com.drew.metadata.AbstractDirectory)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aTagType">the type of this tag</param>
            <param name="aDirectory">the directory of this tag</param>
        </member>
        <member name="M:com.drew.metadata.Tag.GetTagType">
            <summary>
            Gets the tag type as an int 
            </summary>
            <returns>the tag type as an int</returns>
        </member>
        <member name="M:com.drew.metadata.Tag.GetTagTypeHex">
            <summary>
            Gets the tag type in hex notation as a string with padded leading zeroes if necessary (i.e. 0x100E). 
            </summary>
            <returns>the tag type as a string in hexadecimal notation</returns>
        </member>
        <member name="M:com.drew.metadata.Tag.GetDescription">
            <summary>
            Get a description of the tag'str value, considering enumerated values and units. 
            </summary>
            <returns>a description of the tag'str value</returns>
        </member>
        <member name="M:com.drew.metadata.Tag.GetTagName">
            <summary>
            Get the name of the tag, such as Aperture, or InteropVersion.
            </summary>
            <returns>the tag'str name</returns>
        </member>
        <member name="M:com.drew.metadata.Tag.GetDirectoryName">
            <summary>
            Get the name of the directory in which the tag exists, such as Exif, GPS or Interoperability. 
            </summary>
            <returns>name of the directory in which this tag exists</returns>
        </member>
        <member name="M:com.drew.metadata.Tag.ToString">
            <summary>
            A basic representation of the tag'str type and value in format: FNumber - F2.8. 
            </summary>
            <returns>the tag'str type and value</returns>
        </member>
        <member name="M:com.Run.FindAsXml(System.String[])">
            <summary>
            Search for the asXml parameter in the given args.
            </summary>
            <param name="someArgs">the given args</param>
        </member>
        <member name="M:com.Run.FindNoUnknown(System.String[])">
            <summary>
            Search for the noUnknown parameter in the given args.
            </summary>
            <param name="someArgs">the given args</param>
        </member>
        <member name="M:com.Run.FindDoSub(System.String[])">
            <summary>
            Search for the doSub parameter in the given args.
            </summary>
            <param name="someArgs">the given args</param>
        </member>
        <member name="M:com.Run.FindFileNames(System.String[])">
            <summary>
            Search for file names in the given args.
            </summary>
            <param name="someArgs">the given args</param>
            <returns>a file name list</returns>
        </member>
        <member name="M:com.Run.Main(System.String[])">
            <summary>
            The example.
            </summary>
            <param name="someArgs">Arguments</param>
        </member>
        <member name="T:com.SimpleRun">
            <summary>
            This class is a simple example of how to use the classes inside this project.
            </summary>
        </member>
        <member name="M:com.SimpleRun.ShowOneFileAllMetaDataAllTag(System.String)">
            <summary>
            Shows all metadata and all tag for one file.
            </summary>
            <param name="aFileName">the image file name (ex: c:/temp/a.jpg)</param>
            <returns>The information about the image as a string</returns>
        </member>
        <member name="M:com.SimpleRun.ShowOneFileOnlyIptcAllTag(System.String)">
            <summary>
            Shows only IPTC directory and all of its tag for one file.
            </summary>
            <param name="aFileName">the image file name (ex: c:/temp/a.jpg)</param>
            <returns>The information about IPTC for this image as a string</returns>
        </member>
        <member name="M:com.SimpleRun.ShowOneFileOnlyIptcOnlyTagTAG_HEADLINE(System.String)">
            <summary>
            Shows only IPTC directory and only the TAG_HEADLINE value for one file.
            </summary>
            <param name="aFileName">the image file name (ex: c:/temp/a.jpg)</param>
            <returns>The information about IPTC for this image but only the TAG_HEADLINE tag as a string</returns>
        </member>
        <member name="T:com.test.resources.TestAllKeyWords">
            <summary>
            Test if all references to BUNDLE["xxx"] works.
            </summary>
        </member>
        <member name="T:com.utils.xml.TxtOutPutStreamHandler">
            <summary>
            This class will handle text for a metatdata class
            </summary>
        </member>
        <member name="T:com.utils.xml.IOutPutTextStreamHandler">
            <summary>
            This class handles output text format for metadata.
            </summary>
        </member>
        <member name="M:com.utils.xml.IOutPutTextStreamHandler.startTextStream(System.Text.StringBuilder,System.String[])">
            <summary>
            Start out put stream
            </summary>
            <param name="aBuff">where to put informations</param>
            <param name="someParam">Can be used for anything</param>
        </member>
        <member name="M:com.utils.xml.IOutPutTextStreamHandler.endTextStream(System.Text.StringBuilder,System.String[])">
            <summary>
            Finish out put stream
            </summary>
            <param name="aBuff">where to put informations</param>
            <param name="someParam">Can be used for anything</param>
        </member>
        <member name="M:com.utils.xml.IOutPutTextStreamHandler.AsText">
            <summary>
            Transform the Metadata object into a text stream.
            </summary>
            <returns>The Metadata object as a text stream</returns>
        </member>
        <member name="M:com.utils.xml.IOutPutTextStreamHandler.Normalize(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Normalize a value into the text stream
            </summary>
            <param name="aBuff">where to put normalized value</param>
            <param name="aValue">the value to normalize</param>
            <param name="useSpecific">if true will use specific stream, if false will replace FORBIDEN chars by their normal value</param>
        </member>
        <member name="P:com.utils.xml.IOutPutTextStreamHandler.DoUnknown">
            <summary>
            Get/set the unknown option
            </summary>
        </member>
        <member name="P:com.utils.xml.IOutPutTextStreamHandler.Metadata">
            <summary>
            Get/set the metdata attribute
            </summary>
        </member>
        <member name="F:com.utils.xml.TxtOutPutStreamHandler.doUnknown">
            <summary>
            Get/set the unknown option
            </summary>
        </member>
        <member name="M:com.utils.xml.TxtOutPutStreamHandler.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.utils.xml.TxtOutPutStreamHandler.#ctor(com.drew.metadata.Metadata)">
            <summary>
            Constructor of the object.
            </summary>
            <param name="aMetadata">the metadata that shoud be transformed into txt</param>
        </member>
        <member name="M:com.utils.xml.TxtOutPutStreamHandler.BuildForbidenChar">
            <summary>
            Gives all forbiden letter in txt standard and their correspondance.
            </summary>
            <returns>All forbiden chars and their txt correspondance</returns>
        </member>
        <member name="M:com.utils.xml.TxtOutPutStreamHandler.Normalize(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Normalize a value into Txt
            </summary>
            <param name="aBuff">where to put new XML value</param>
            <param name="aValue">the value to normalize</param>
            <param name="useCdata">if false will replace FORBIDEN chars by their normal value, else will do nothing</param>
        </member>
        <member name="M:com.utils.xml.TxtOutPutStreamHandler.CreateTag(System.Text.StringBuilder,com.drew.metadata.Tag)">
            <summary>
            Creates an TXT tag using the Tag object info.
            </summary>
            <param name="aBuff">where to put tag</param>
            <param name="aTag">the tag</param>
        </member>
        <member name="M:com.utils.xml.TxtOutPutStreamHandler.CreateDirectory(System.Text.StringBuilder,com.drew.metadata.AbstractDirectory)">
            <summary>
            Creates a directory tag.
            </summary>
            <param name="aBuff">where to put info</param>
            <param name="aDirectory">the information to add</param>
        </member>
        <member name="M:com.utils.xml.TxtOutPutStreamHandler.AsText">
            <summary>
            Transform the metatdat object into an TXT stream.
            </summary>
            <returns>The metadata object as TXT stream</returns>
        </member>
        <member name="M:com.utils.xml.TxtOutPutStreamHandler.startTextStream(System.Text.StringBuilder,System.String[])">
            <summary>
            Start out put stream. Does nothing.
            </summary>
            <param name="aBuff">where to put informations</param>
            <param name="someParam">Can be used for anything</param>
        </member>
        <member name="M:com.utils.xml.TxtOutPutStreamHandler.endTextStream(System.Text.StringBuilder,System.String[])">
            <summary>
            Finish out put stream. Does nothing.
            </summary>
            <param name="aBuff">where to put informations</param>
            <param name="someParam">Can be used for anything</param>
        </member>
        <member name="T:com.utils.xml.XmlOutPutStreamHandler">
            <summary>
            This class will handle XML for a Directory class.
            
            For default XML stream you can have a look to MetadataExtractor.dtd file and sampleFile.xml.
            </summary>
        </member>
        <member name="F:com.utils.xml.XmlOutPutStreamHandler.LOADED_DTD">
            <summary>
            The cached DTD.
            </summary>
        </member>
        <member name="F:com.utils.xml.XmlOutPutStreamHandler.dtdFileName">
            <summary>
            The DTD path and file name.
            </summary>
        </member>
        <member name="F:com.utils.xml.XmlOutPutStreamHandler.doUnknown">
            <summary>
            Get/set the unknown option
            </summary>
        </member>
        <member name="M:com.utils.xml.XmlOutPutStreamHandler.#ctor">
            <summary>
            Constructor of the object.
            </summary>
        </member>
        <member name="M:com.utils.xml.XmlOutPutStreamHandler.#ctor(com.drew.metadata.Metadata)">
            <summary>
            Constructor of the object.
            </summary>
            <param name="aMetadata">the metadata that shoud be transformed into XML</param>
        </member>
        <member name="M:com.utils.xml.XmlOutPutStreamHandler.LoadDtd">
            <summary>
            Gives all forbiden letter in XML standard and their correspondance.
            </summary>
            <returns>All forbiden chars and their XML correspondance</returns>
        </member>
        <member name="M:com.utils.xml.XmlOutPutStreamHandler.BuildForbidenChar">
            <summary>
            Gives all forbiden letter in XML standard and their correspondance.
            </summary>
            <returns>All forbiden chars and their XML correspondance</returns>
        </member>
        <member name="M:com.utils.xml.XmlOutPutStreamHandler.startTextStream(System.Text.StringBuilder,System.String[])">
            <summary>
            Start out put stream
            </summary>
            <param name="aBuff">where to put informations</param>
            <param name="someParam">Specify encoding here in 0, in 1 you can add a XSLT ref, in 2 the number of files, in 3 the dtd path</param>
        </member>
        <member name="M:com.utils.xml.XmlOutPutStreamHandler.endTextStream(System.Text.StringBuilder,System.String[])">
            <summary>
            Finish out put stream
            </summary>
            <param name="aBuff">where to put informations</param>
            <param name="someParam">Should contain nb file in [2]</param>
        </member>
        <member name="M:com.utils.xml.XmlOutPutStreamHandler.Normalize(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Normalize a value into XML
            </summary>
            <param name="aBuff">where to put new XML value</param>
            <param name="aValue">the value to normalize</param>
            <param name="useCdata">if true will use CDATA, if false will replace FORBIDEN chars by their normal value</param>
        </member>
        <member name="M:com.utils.xml.XmlOutPutStreamHandler.Close(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Opens an XML tag.
            </summary>
            <param name="aBuff">where to open tag</param>
            <param name="aTag">what to put inside the tag</param>
            <param name="isNewLine">if true will go to new line after open</param>
        </member>
        <member name="M:com.utils.xml.XmlOutPutStreamHandler.Open(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Closes an XML tag.
            </summary>
            <param name="aBuff">where to close tag</param>
            <param name="aTag">what to put inside the tag</param>
            <param name="isNewLine">if true will go to new line after close</param>
        </member>
        <member name="M:com.utils.xml.XmlOutPutStreamHandler.CreateTag(System.Text.StringBuilder,com.drew.metadata.Tag)">
            <summary>
            Creates an XML tag using the Tag object info.
            Examples :
            <pre>
            &lt;tag type="0x0044"&gt;
              &lt;tagLabel&gt;White Balance&lt;/tagLabel&gt;
              &lt;tagDescription>&lt;![CDATA[Very bright]]&gt;&lt;/tagDescription&gt;
            &lt;/tag&gt;
            <br/>
            &lt;tag type="0x0044"&gt;
              &lt;tagLabel&gt;White Balance&lt;/tagLabel&gt;
              &lt;tagDescription/&gt;
            &lt;/tag&gt;
            <br/>
            &lt;tag type="0x0044"&gt;
              &lt;tagLabel&gt;White Balance&lt;/tagLabel&gt;
              &lt;tagDescription/&gt;
              &lt;tagError&gt;&lt;![CDATA[Oups something is wrong]]&gt;&lt;/tagError&gt;
            &lt;/tag&gt;
            </pre>
            </summary>
            <param name="aBuff">where to put tag</param>
            <param name="aTag">the tag</param>
        </member>
        <member name="M:com.utils.xml.XmlOutPutStreamHandler.CreateDirectory(System.Text.StringBuilder,com.drew.metadata.AbstractDirectory)">
            <summary>
            Creates a directory tag.
            
            Examples :
            <pre>
            &lt;directory name="Exif"&gt;
              &lt;tag&gt;
                ...
              &lt;/tag&gt;
              &lt;tag&gt;
                ...
              &lt;/tag&gt;
            &lt;/directory&gt;
            </pre>
            </summary>
            <param name="aBuff">where to put info</param>
            <param name="aDirectory">the information to add</param>
        </member>
        <member name="M:com.utils.xml.XmlOutPutStreamHandler.AsText">
            <summary>
            Transform the metatdat object into an XML stream.
            </summary>
            <returns>The metadata object as XML stream</returns>
        </member>
        <member name="T:com.utils.MissingResourceException">
            <summary>
            This class represents a missing resource exception.
            
            Used by ResourveBundle class.
            </summary>
        </member>
        <member name="M:com.utils.MissingResourceException.#ctor(System.String)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aMessage">The error aMessage</param>
        </member>
        <member name="M:com.utils.MissingResourceException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aMessage">The error aMessage</param>
            <param name="aCause">The aCause of the exception</param>
        </member>
        <member name="M:com.utils.MissingResourceException.#ctor(System.Exception)">
            <summary>
            Constructor of the object
            </summary>
            <param name="aCause">The aCause of the exception</param>
        </member>
        <member name="T:com.utils.ResourceBundle">
            <summary>
            This class is a bundle class.<br/>
            
            Used for internationalisation (multi-language).<br/>
            
            Allow the use of messages with holes.<br/>
            
            Example:
            <pre>
            KEY1=Hello
            KEY2=Hello {0}
            KEY3=Hello {0} with an age of {1}
            Then you will use :
            myBundle["KEY1"];
            myBundle["KEY2", "Jhon"];
            myBundle["KEY3", "Jhon", 32.ToString()];
            myBundle["KEY3", new string[] {"Jhon", 32.ToString()}];
            </pre>
            </summary>
        </member>
        <member name="F:com.utils.ResourceBundle.DEFAULT_NAME_SPACE">
            <summary>
            Put here the same value as you can see in your project property on tab Application for information default namespace.
            </summary>
        </member>
        <member name="M:com.utils.ResourceBundle.#ctor">
            <summary>
            Constructor of the object.
            
            Keep private, use the other one.
            </summary>
        </member>
        <member name="M:com.utils.ResourceBundle.#ctor(System.String)">
            <summary>
            Constructor of the object.
            </summary>
            <param name="aPropertyFileName">The resource file where to find keys. Do not add the extension and do not forget to add your resource file into the assembly.</param>
        </member>
        <member name="M:com.utils.ResourceBundle.Dispose">
            <summary>
            Clean the object.
            </summary>				
        </member>
        <member name="M:com.utils.ResourceBundle.replace(System.String,System.String[])">
            <summary>
            Fills the gap in a string.
            </summary>
            <param name="aLine">where to fill the gap. A gap is {0} or {1} ...</param>
            <param name="fillGapWith">what to put in the gap. fillGapWith[0] will go in {0} and so on</param>
            <returns></returns>
        </member>
        <member name="P:com.utils.ResourceBundle.Item(System.String)">
            <summary>
            Indexator on a simple aMessage.
            </summary>
            <param name="aKey">the referenced key</param>
            <returns>the aMessage attached to this key, or launch a MissingResourceException if none found</returns>
        </member>
        <member name="P:com.utils.ResourceBundle.Item(System.String,System.String)">
            <summary>
            Indexator on a aMessage with one hole {0} in it.
            </summary>
            <param name="aKey">the referenced key</param>
            <param name="fillGapWith">what to put in hole {0}</param>
            <returns>the aMessage attached to this key, or launch a MissingResourceException if none found</returns>
        </member>
        <member name="P:com.utils.ResourceBundle.Item(System.String,System.String,System.String)">
            <summary>
            Indexator on a aMessage with two holes {0} and {1} in it.
            </summary>
            <param name="aKey">the referenced key</param>
            <param name="fillGap0">what to put in hole {0}</param>
            <param name="fillGap1">what to put in hole {1}</param>
            <returns>the aMessage attached to this key, or launch a MissingResourceException if none found</returns>
        </member>
        <member name="P:com.utils.ResourceBundle.Item(System.String,System.String[])">
            <summary>
            Indexator on a aMessage with many holes {0}, {1}, {2] ... in it.
            </summary>
            <param name="aKey">the referenced key</param>
            <param name="fillGapWith">what to put in holes. fillGapWith[0] used for {0}, fillGapWith[1] used for {1} ...</param>
            <returns>the aMessage attached to this key, or launch a MissingResourceException if none found</returns>
        </member>
        <member name="T:com.utils.Utils">
            <summary>
            Class that try to recreate some Java functionnalities.
            </summary>
        </member>
        <member name="M:com.utils.Utils.#ctor">
            <summary>
            Constructor of the object
            </summary>
            <exception cref="T:System.UnauthorizedAccessException">always</exception>
        </member>
        <member name="M:com.utils.Utils.Decode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Builds a string from a byte array
            </summary>
            <param name="anArray">the array of byte</param>
            <param name="lcOffset">where to start</param>
            <param name="length">the length to transform in string</param>
            <param name="removeSpace">if true, spaces will be avoid</param>
            <returns>a string representing the array of byte</returns>
        </member>
        <member name="M:com.utils.Utils.Decode(System.Byte[],System.Boolean)">
            <summary>
            Builds a string from a byte array
            </summary>
            <param name="anArray">the array of byte</param>
            <param name="removeSpace">if true, spaces will be avoid</param>
            <returns>a string representing the array of byte</returns>
        </member>
        <member name="M:com.utils.Utils.SearchAllFileIn(System.String,System.Boolean,System.String)">
            <summary>
            Search for files in the given directory.
            </summary>
            <param name="aRootDirectory">Where to start the search</param>
            <param name="doRecurse">if true will do sub directories as well</param>
            <param name="aSearchPattern">if not null will take only file with the given axtension (ex "*.jpg")</param>
            <returns>a list of file name</returns>
        </member>
    </members>
</doc>
